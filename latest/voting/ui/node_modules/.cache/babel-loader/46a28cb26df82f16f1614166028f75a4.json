{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\finnw\\\\OneDrive\\\\Documents\\\\GitHub\\\\Blockchain-Voting\\\\latest\\\\voting\\\\ui\\\\src\\\\pages\\\\report\\\\Report.tsx\";\nimport React, { useState } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Button from \"@material-ui/core/Button\";\nimport { useStreamQueries, useLedger, useParty } from \"@daml/react\";\nimport { Asset } from \"@daml.js/voting-0.0.1/lib/Main\";\nimport { InputDialog } from \"./InputDialog\";\nimport useStyles from \"./styles\";\nexport default function Report() {\n  const classes = useStyles();\n  const party = useParty();\n  const ledger = useLedger();\n  const assets = useStreamQueries(Asset);\n  const defaultGiveProps = {\n    open: false,\n    title: \"Give Asset\",\n    defaultValue: {\n      newOwner: \"\"\n    },\n    fields: {\n      newOwner: {\n        label: \"New Owner\",\n        type: \"selection\",\n        items: [\"Alice\", \"Bob\"]\n      }\n    },\n    onClose: async function () {}\n  };\n  const [giveProps, setGiveProps] = useState(defaultGiveProps); // One can pass the original contracts CreateEvent\n\n  function showGive(asset) {\n    async function onClose(state) {\n      setGiveProps({ ...defaultGiveProps,\n        open: false\n      }); // if you want to use the contracts payload\n\n      if (!state || asset.payload.owner === state.newOwner) return;\n      await ledger.exercise(Asset.Give, asset.contractId, state);\n    }\n\n    ;\n    setGiveProps({ ...defaultGiveProps,\n      open: true,\n      onClose\n    });\n  }\n\n  ;\n  const today = new Date().toISOString().slice(0, 10);\n  const defaultAppraiseProps = {\n    open: false,\n    title: \"Appraise Asset\",\n    defaultValue: {\n      newValue: \"0\"\n    },\n    fields: {\n      newValue: {\n        label: \"New Value\",\n        type: \"number\"\n      }\n    },\n    onClose: async function () {}\n  };\n  const [appraiseProps, setAppraiseProps] = useState(defaultAppraiseProps); // Or can pass just the ContractId of an\n\n  function showAppraise(assetContractId) {\n    async function onClose(state) {\n      setAppraiseProps({ ...defaultAppraiseProps,\n        open: false\n      });\n      if (!state) return;\n      const withNewDateOfAppraisal = { ...state,\n        newDateOfAppraisal: today\n      };\n      await ledger.exercise(Asset.Appraise, assetContractId, withNewDateOfAppraisal);\n    }\n\n    ;\n    setAppraiseProps({ ...defaultAppraiseProps,\n      open: true,\n      onClose\n    });\n  }\n\n  ;\n  const defaultNewAssetProps = {\n    open: false,\n    title: \"New Asset\",\n    defaultValue: {\n      owner: party,\n      name: \"\",\n      dateOfAppraisal: today,\n      value: \"0\"\n    },\n    fields: {\n      owner: {\n        label: \"Owner\",\n        type: \"selection\",\n        items: [\"Alice\", \"Bob\"]\n      },\n      name: {\n        label: \"Name of Asset\",\n        type: \"text\"\n      },\n      dateOfAppraisal: {\n        label: \"Date of Appraisal\",\n        type: \"date\"\n      },\n      value: {\n        label: \"Value\",\n        type: \"number\"\n      }\n    },\n    onClose: async function () {}\n  };\n  const [newAssetProps, setNewAssetProps] = useState(defaultNewAssetProps);\n\n  function showNewAsset() {\n    async function onClose(state) {\n      setNewAssetProps({ ...defaultNewAssetProps,\n        open: false\n      });\n      if (!state) return;\n      const withIssuer = { ...state,\n        issuer: party\n      };\n      await ledger.create(Asset, withIssuer);\n    }\n\n    ;\n    setNewAssetProps({ ...defaultNewAssetProps,\n      open: true,\n      onClose\n    });\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InputDialog, Object.assign({}, giveProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(InputDialog, Object.assign({}, appraiseProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(InputDialog, Object.assign({}, newAssetProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    size: \"small\",\n    className: classes.choiceButton,\n    variant: \"contained\",\n    onClick: () => showNewAsset(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"Create New Asset\"), /*#__PURE__*/React.createElement(Table, {\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    className: classes.tableRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    key: 0,\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, \"Issuer\"), /*#__PURE__*/React.createElement(TableCell, {\n    key: 1,\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, \"Owner\"), /*#__PURE__*/React.createElement(TableCell, {\n    key: 2,\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(TableCell, {\n    key: 3,\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, \"Value\"), /*#__PURE__*/React.createElement(TableCell, {\n    key: 4,\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, \"DateOfAppraisal\"), /*#__PURE__*/React.createElement(TableCell, {\n    key: 5,\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, \"Give\"), /*#__PURE__*/React.createElement(TableCell, {\n    key: 6,\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"Appraise\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, assets.contracts.map(a => /*#__PURE__*/React.createElement(TableRow, {\n    key: a.contractId,\n    className: classes.tableRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    key: 0,\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 15\n    }\n  }, a.payload.issuer), /*#__PURE__*/React.createElement(TableCell, {\n    key: 1,\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  }, a.payload.owner), /*#__PURE__*/React.createElement(TableCell, {\n    key: 2,\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, a.payload.name), /*#__PURE__*/React.createElement(TableCell, {\n    key: 3,\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }, a.payload.value), /*#__PURE__*/React.createElement(TableCell, {\n    key: 4,\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, a.payload.dateOfAppraisal), /*#__PURE__*/React.createElement(TableCell, {\n    key: 5,\n    className: classes.tableCellButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    size: \"small\",\n    className: classes.choiceButton,\n    variant: \"contained\",\n    disabled: a.payload.owner !== party,\n    onClick: () => showGive(a),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, \"Give\")), /*#__PURE__*/React.createElement(TableCell, {\n    key: 6,\n    className: classes.tableCellButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    size: \"small\",\n    className: classes.choiceButton,\n    variant: \"contained\",\n    disabled: a.payload.issuer !== party,\n    onClick: () => showAppraise(a.contractId),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, \"Appraise\")))))));\n}","map":{"version":3,"sources":["C:/Users/finnw/OneDrive/Documents/GitHub/Blockchain-Voting/latest/voting/ui/src/pages/report/Report.tsx"],"names":["React","useState","Table","TableHead","TableRow","TableCell","TableBody","Button","useStreamQueries","useLedger","useParty","Asset","InputDialog","useStyles","Report","classes","party","ledger","assets","defaultGiveProps","open","title","defaultValue","newOwner","fields","label","type","items","onClose","giveProps","setGiveProps","showGive","asset","state","payload","owner","exercise","Give","contractId","today","Date","toISOString","slice","defaultAppraiseProps","newValue","appraiseProps","setAppraiseProps","showAppraise","assetContractId","withNewDateOfAppraisal","newDateOfAppraisal","Appraise","defaultNewAssetProps","name","dateOfAppraisal","value","newAssetProps","setNewAssetProps","showNewAsset","withIssuer","issuer","create","choiceButton","tableRow","tableCell","contracts","map","a","tableCellButton"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Button from \"@material-ui/core/Button\";\nimport Ledger from \"@daml/ledger\";\nimport { useStreamQueries, useLedger, useParty } from \"@daml/react\";\nimport { ContractId } from \"@daml/types\";\nimport { Appraise, Asset, Give  } from \"@daml.js/voting-0.0.1/lib/Main\";\nimport { InputDialog, InputDialogProps } from \"./InputDialog\";\nimport useStyles from \"./styles\";\n\nexport default function Report() {\n  const classes = useStyles();\n  const party = useParty();\n  const ledger : Ledger = useLedger();\n  const assets = useStreamQueries(Asset);\n\n  const defaultGiveProps : InputDialogProps<Give> = {\n    open: false,\n    title: \"Give Asset\",\n    defaultValue: { newOwner : \"\" },\n    fields: {\n      newOwner : {\n        label: \"New Owner\",\n        type: \"selection\",\n        items: [ \"Alice\", \"Bob\" ] } },\n    onClose: async function() {}\n  };\n\n  const [ giveProps, setGiveProps ] = useState(defaultGiveProps);\n  // One can pass the original contracts CreateEvent\n  function showGive(asset : Asset.CreateEvent) {\n    async function onClose(state : Give | null) {\n      setGiveProps({ ...defaultGiveProps, open: false});\n      // if you want to use the contracts payload\n      if (!state || asset.payload.owner === state.newOwner) return;\n      await ledger.exercise(Asset.Give, asset.contractId, state);\n    };\n    setGiveProps({ ...defaultGiveProps, open: true, onClose})\n  };\n\n  type UserSpecifiedAppraise = Pick<Appraise, \"newValue\">;\n  const today = (new Date()).toISOString().slice(0,10);\n  const defaultAppraiseProps : InputDialogProps<UserSpecifiedAppraise> = {\n    open: false,\n    title: \"Appraise Asset\",\n    defaultValue: { newValue: \"0\" },\n    fields: {\n      newValue : {\n        label: \"New Value\",\n        type: \"number\" }\n      },\n    onClose: async function() {}\n  };\n  const [ appraiseProps, setAppraiseProps ] = useState(defaultAppraiseProps);\n\n  // Or can pass just the ContractId of an\n  function showAppraise(assetContractId : ContractId<Asset>) {\n    async function onClose(state : UserSpecifiedAppraise | null) {\n      setAppraiseProps({ ...defaultAppraiseProps, open: false});\n      if (!state) return;\n      const withNewDateOfAppraisal = { ...state, newDateOfAppraisal:today};\n      await ledger.exercise(Asset.Appraise, assetContractId, withNewDateOfAppraisal);\n    };\n    setAppraiseProps({...defaultAppraiseProps, open: true, onClose});\n  };\n\n  type InputFieldsForNewAsset = Omit<Asset, \"issuer\">;\n  const defaultNewAssetProps : InputDialogProps<InputFieldsForNewAsset> = {\n    open: false,\n    title: \"New Asset\",\n    defaultValue: {\n      owner: party,\n      name: \"\",\n      dateOfAppraisal: today,\n      value: \"0\",\n    },\n    fields: {\n      owner: {\n        label: \"Owner\",\n        type: \"selection\",\n        items: [ \"Alice\", \"Bob\" ],\n      },\n      name: {\n        label: \"Name of Asset\",\n        type: \"text\"\n      },\n      dateOfAppraisal: {\n        label: \"Date of Appraisal\",\n        type: \"date\"\n      },\n      value: {\n        label: \"Value\",\n        type: \"number\"\n      }\n    },\n    onClose: async function() {}\n  };\n  const [newAssetProps, setNewAssetProps] = useState(defaultNewAssetProps);\n  function showNewAsset() {\n    async function onClose(state : InputFieldsForNewAsset | null) {\n      setNewAssetProps({ ...defaultNewAssetProps, open: false});\n      if (!state) return;\n      const withIssuer = { ...state, issuer:party};\n      await ledger.create(Asset, withIssuer);\n    };\n    setNewAssetProps({...defaultNewAssetProps, open: true, onClose});\n  };\n\n  return (\n    <>\n      <InputDialog { ...giveProps } />\n      <InputDialog { ...appraiseProps } />\n      <InputDialog { ...newAssetProps } />\n      <Button color=\"primary\" size=\"small\" className={classes.choiceButton} variant=\"contained\" onClick={() => showNewAsset()}>\n        Create New Asset\n      </Button>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow className={classes.tableRow}>\n            <TableCell key={0} className={classes.tableCell}>Issuer</TableCell>\n            <TableCell key={1} className={classes.tableCell}>Owner</TableCell>\n            <TableCell key={2} className={classes.tableCell}>Name</TableCell>\n            <TableCell key={3} className={classes.tableCell}>Value</TableCell>\n            <TableCell key={4} className={classes.tableCell}>DateOfAppraisal</TableCell>\n            <TableCell key={5} className={classes.tableCell}>Give</TableCell>\n            <TableCell key={6} className={classes.tableCell}>Appraise</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {assets.contracts.map(a => (\n            <TableRow key={a.contractId} className={classes.tableRow}>\n              <TableCell key={0} className={classes.tableCell}>{a.payload.issuer}</TableCell>\n              <TableCell key={1} className={classes.tableCell}>{a.payload.owner}</TableCell>\n              <TableCell key={2} className={classes.tableCell}>{a.payload.name}</TableCell>\n              <TableCell key={3} className={classes.tableCell}>{a.payload.value}</TableCell>\n              <TableCell key={4} className={classes.tableCell}>{a.payload.dateOfAppraisal}</TableCell>\n              <TableCell key={5} className={classes.tableCellButton}>\n                <Button color=\"primary\" size=\"small\" className={classes.choiceButton} variant=\"contained\" disabled={a.payload.owner !== party} onClick={() => showGive(a)}>Give</Button>\n              </TableCell>\n              <TableCell key={6} className={classes.tableCellButton}>\n                <Button color=\"primary\" size=\"small\" className={classes.choiceButton} variant=\"contained\" disabled={a.payload.issuer !== party} onClick={() => showAppraise(a.contractId)}>Appraise</Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}