[{"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/index.tsx":"1","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/auth/auth0-provider-with-history.js":"2","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/App.tsx":"3","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/config.ts":"4","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/VoteManagement.tsx":"5","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/MainView.tsx":"6","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/LoginScreen.tsx":"7","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/VoteScreen.tsx":"8","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/MainScreen.tsx":"9","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/CatchNotFound.tsx":"10","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/VoteAnalytics.tsx":"11","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/HelpPopup.tsx":"12"},{"size":609,"mtime":1658192358000,"results":"13","hashOfConfig":"14"},{"size":701,"mtime":1658638610000,"results":"15","hashOfConfig":"14"},{"size":4229,"mtime":1658646082000,"results":"16","hashOfConfig":"14"},{"size":1039,"mtime":1660366278287,"results":"17","hashOfConfig":"14"},{"size":3338,"mtime":1660366272572,"results":"18","hashOfConfig":"14"},{"size":10740,"mtime":1660366276213,"results":"19","hashOfConfig":"14"},{"size":7428,"mtime":1660366277029,"results":"20","hashOfConfig":"14"},{"size":5226,"mtime":1660366262662,"results":"21","hashOfConfig":"14"},{"size":3368,"mtime":1658646254000,"results":"22","hashOfConfig":"14"},{"size":2717,"mtime":1658658666000,"results":"23","hashOfConfig":"14"},{"size":6505,"mtime":1660366274804,"results":"24","hashOfConfig":"14"},{"size":1300,"mtime":1658557644000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"11zccp8",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"28"},"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/index.tsx",[],["56","57"],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/auth/auth0-provider-with-history.js",[],["58","59"],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/App.tsx",["60","61"],"// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from \"react\";\nimport { LoginScreenVote, LandingScreen } from \"./LoginScreen\";\nimport { LogoutConfirm, PageNotFound } from \"./CatchNotFound\";\nimport MainScreen from \"./MainScreen\";\nimport VoteManagement from \"./VoteManagement\";\nimport VoteScreen from \"./VoteScreen\";\nimport DamlLedger from \"@daml/react\";\nimport Credentials from \"../Credentials\";\nimport { httpBaseUrl, wsBaseUrl } from \"../config\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport VoteAnalytics from \"./VoteAnalytics\";\nimport MainView from \"./MainView\";\nimport {\n  createTheme,\n  ThemeProvider,\n  Typography,\n  useMediaQuery,\n} from \"@mui/material\";\n\nexport function themeSwitcher() {}\n\nconst App: React.FC = () => {\n  const [credentials, setCredentials] = React.useState<\n    Credentials | undefined\n  >();\n  // create a dark theme light theme switcher\n  const preferedScheme = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: preferedScheme ? \"dark\" : \"light\",\n          primary: {\n            main: \"#387DF6\",\n          },\n          secondary: {\n            main: \"#666666\",\n          },\n        },\n\n        typography: {\n          fontFamily: \"Roboto, sans-serif\",\n          subtitle1: {\n            fontSize: 16,\n          },\n          h5: {\n            fontWeight: 700,\n            fontSize: 24,\n          },\n          h6: {\n            fontWeight: 500,\n          },\n        },\n      }),\n    [preferedScheme]\n  );\n  // app.use((req: any, res: any, next: any) => {\n  //   res.header(\"Access-Control-Allow-Origin\", \"*\");\n  //   next();\n  // });\n\n  return credentials ? (\n    <DamlLedger\n      token={credentials.token}\n      party={credentials.party}\n      httpBaseUrl={httpBaseUrl}\n      wsBaseUrl={wsBaseUrl}\n    >\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <div>\n          {/* <MainScreen onLogout={() => setCredentials(undefined)} /> */}\n\n          <Routes>\n            {/* <Route path=\"/\" component={Home} /> */}\n            <Route\n              path=\"/Vote\"\n              element={\n                <>\n                  <VoteScreen onLogout={() => setCredentials(undefined)} />\n                </>\n              }\n            ></Route>\n            <Route\n              path=\"/CreateVote\"\n              element={\n                <>\n                  <MainScreen onLogout={() => setCredentials(undefined)} />\n                  <MainView />\n                </>\n              }\n            ></Route>\n            <Route\n              path=\"/VoteAnalytics\"\n              element={\n                <>\n                  <MainScreen onLogout={() => setCredentials(undefined)} />\n                  <VoteAnalytics />\n                </>\n              }\n            ></Route>\n\n            <Route\n              path=\"/VoteManagement\"\n              element={\n                <>\n                  <MainScreen onLogout={() => setCredentials(undefined)} />\n                  <VoteManagement />\n                </>\n              }\n            ></Route>\n\n            <Route\n              path=\"*\"\n              element={\n                <LogoutConfirm onLogout={() => setCredentials(undefined)} />\n              }\n            ></Route>\n          </Routes>\n        </div>\n      </ThemeProvider>\n    </DamlLedger>\n  ) : (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div>\n        <Routes>\n          {/* <Route path=\"/\" component={Home} /> */}\n\n          <Route\n            path=\"/\"\n            element={<LandingScreen onLogin={setCredentials} />}\n          ></Route>\n          <Route\n            path=\"/VoteLogin/*\"\n            element={<LoginScreenVote onLogin={setCredentials} />}\n          ></Route>\n          <Route\n            path=\"/VoteLogin\"\n            element={<LoginScreenVote onLogin={setCredentials} />}\n          ></Route>\n          <Route path=\"*\" element={<PageNotFound />}></Route>\n        </Routes>\n      </div>\n    </ThemeProvider>\n\n    //\n  );\n};\n// APP_END\n\nexport default App;\n","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/config.ts",[],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/VoteManagement.tsx",[],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/MainView.tsx",["62"],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/LoginScreen.tsx",["63","64","65"],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/VoteScreen.tsx",["66"],"import React, { useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  List,\n  ListItem,\n  Container,\n  FormLabel,\n  FormControlLabel,\n  RadioGroup,\n  FormControl,\n  Typography,\n  Radio,\n  Divider,\n  Box,\n  Snackbar,\n  IconButton,\n  Paper,\n} from \"@mui/material\";\nimport { Close, HowToVote, Logout } from \"@mui/icons-material\";\nimport { Voting } from \"@daml.js/votencrypt\";\nimport { useParty, useLedger, useStreamQueries } from \"@daml/react\";\nimport { Link } from \"react-router-dom\";\nimport { InvalidVoteKey } from \"./CatchNotFound\";\n\ntype Props = {\n  onLogout: () => void;\n};\n\nconst VoteScreen: React.FC<Props> = ({ onLogout }) => {\n  const hashUsername = useParty();\n  const ledger = useLedger();\n\n  const [Popup, setPopup] = React.useState(false);\n  const [popupText, setPopupText] = React.useState(\"\");\n\n  const handleClose = (\n    event: React.SyntheticEvent | Event,\n    reason?: string\n  ) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setPopup(false);\n  };\n  const action = (\n    <React.Fragment>\n      <IconButton\n        size=\"small\"\n        aria-label=\"close\"\n        color=\"inherit\"\n        onClick={handleClose}\n      >\n        <Close fontSize=\"small\" />\n      </IconButton>\n    </React.Fragment>\n  );\n\n  const assets = useStreamQueries(Voting.Voting);\n  const [radioStatus, setRadioStatus] = useState(\"\");\n  // get current unix time stamp\n  const now = new Date().getTime();\n\n  const buttonHandler = async () => {\n    if (assets.contracts[0]?.payload.voted.includes(hashUsername)) {\n      setPopupText(\"You have already voted\");\n\n      setPopup(true);\n    } else {\n      await ledger\n        .exerciseByKey(\n          Voting.Voting.Vote,\n          assets.contracts[0]?.signatories[0],\n          { voter: hashUsername, vote: radioStatus, unixTime: now.toString() }\n        )\n        .catch(console.error);\n      setPopupText(\"Your vote has been cast. Please or close the browser tab\");\n\n      setPopup(true);\n    }\n  };\n\n  return (\n    <>\n      <Box textAlign={\"right\"} sx={{ p: 1 }}>\n        <Button\n          variant=\"outlined\"\n          color=\"inherit\"\n          startIcon={<Logout />}\n          onClick={onLogout}\n          component={Link}\n          to=\"/\"\n        >\n          Log Out\n        </Button>\n      </Box>\n      <Container>\n        <Grid\n          container\n          direction=\"column\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          style={{ height: \"75vh\" }}\n        >\n          <Paper\n            sx={{ p: 3, borderRadius: \"16px\", width: \"90%\" }}\n            elevation={2}\n          >\n            <Grid container spacing={0}>\n              <Grid item>\n                <HowToVote sx={{ fontSize: 50 }} color=\"primary\" />\n              </Grid>\n\n              <Grid item>\n                <Grid item>\n                  <Typography variant=\"h5\" display=\"block\">\n                    Vote\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography\n                    variant=\"subtitle1\"\n                    color=\"secondary\"\n                    display=\"block\"\n                    style={{ lineHeight: \"15px\" }}\n                  >\n                    Read the vote description carefully and choose an option\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n\n            <Divider />\n\n            <Typography variant=\"h6\" sx={{ pt: 2 }}>\n              Vote Description\n            </Typography>\n            {assets.contracts[0]?.payload?.subject ?? \"Invalid Vote Key\"}\n\n            <Divider sx={{ pb: 2 }} />\n            <Box textAlign=\"center\">\n              <FormControl>\n                <FormLabel id=\"demo-radio-buttons-group-label\">\n                  Options\n                </FormLabel>\n                <RadioGroup\n                  aria-labelledby=\"demo-radio-buttons-group-label\"\n                  defaultValue=\"female\"\n                  name=\"radio-buttons-group\"\n                >\n                  <List>\n                    {assets.contracts[0]?.payload?.options.map((item) => (\n                      <ListItem key={item}>\n                        <FormControlLabel\n                          value={item}\n                          control={<Radio />}\n                          label={item}\n                          onChange={(event) => {\n                            setRadioStatus(item);\n                          }}\n                        />\n                      </ListItem>\n                    ))}\n                  </List>\n                </RadioGroup>\n              </FormControl>\n            </Box>\n            <Box textAlign=\"center\">\n              <Button\n                variant=\"contained\"\n                onClick={buttonHandler}\n                className=\"button\"\n                name=\"Create Vote\"\n                sx={{ m: 2, alignItems: \"center\" }}\n              >\n                Vote\n              </Button>\n            </Box>\n            <Snackbar\n              open={Popup}\n              autoHideDuration={4000}\n              onClose={handleClose}\n              message={popupText}\n              action={action}\n            />\n          </Paper>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default VoteScreen;\n","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/MainScreen.tsx",["67","68"],"// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from \"react\";\nimport {\n  Typography,\n  Box,\n  IconButton,\n  Toolbar,\n  Drawer,\n  Button,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  AppBar,\n} from \"@mui/material\";\n\nimport { Link } from \"react-router-dom\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport {\n  Ballot,\n  Poll,\n  Logout,\n  PublishedWithChanges,\n} from \"@mui/icons-material\";\nimport { useParty } from \"@daml/react\";\nimport { usernameExport } from \"./LoginScreen\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\ntype Props = {\n  onLogout: () => void;\n};\n\nconst MainScreen: React.FC<Props> = ({ onLogout }) => {\n  const { isAuthenticated, logout } = useAuth0();\n\n  const hashUsername = useParty();\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const LogoutCall = () => {\n    logout({\n      returnTo: window.location.origin,\n    });\n  };\n  return (\n    <>\n      <Box sx={{ flexGrow: 1, m: 2 }}>\n        <AppBar position=\"static\" sx={{ borderRadius: \"16px\" }}>\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"start\"\n              onClick={handleDrawerOpen}\n              className=\"menu-button\"\n            >\n              <MenuIcon />\n            </IconButton>\n\n            <Typography variant=\"h5\" sx={{ flexGrow: 1 }} noWrap>\n              Votencrypt\n            </Typography>\n\n            <Button\n              variant=\"outlined\"\n              color=\"inherit\"\n              startIcon={<Logout />}\n              onClick={LogoutCall}\n            >\n              Log Out\n            </Button>\n          </Toolbar>\n        </AppBar>\n      </Box>\n      <Typography\n        variant=\"h3\"\n        textAlign=\"center\"\n        color=\"primary\"\n        sx={{ padding: 3 }}\n      >\n        Welcome, {usernameExport}\n      </Typography>\n      <Drawer anchor=\"left\" open={open} onClose={() => setOpen(false)}>\n        <Box p={2} width=\"250px\" textAlign=\"center\" role=\"presentation\">\n          <Typography variant=\"h6\" component=\"div\">\n            Menu\n          </Typography>\n          <List>\n            <ListItem\n              button\n              component={Link}\n              to=\"/CreateVote\"\n              className=\"test-select-list-item\"\n            >\n              <ListItemIcon>\n                <Ballot />\n              </ListItemIcon>\n              <ListItemText primary=\"Create Vote\" />\n            </ListItem>\n\n            <ListItem\n              button\n              component={Link}\n              to=\"/VoteAnalytics\"\n              className=\"test-select-list-item\"\n            >\n              <ListItemIcon>\n                <Poll />\n              </ListItemIcon>\n              <ListItemText primary=\"Analytics\" />\n            </ListItem>\n\n            <ListItem\n              button\n              component={Link}\n              to=\"/VoteManagement\"\n              className=\"test-select-list-item\"\n            >\n              <ListItemIcon>\n                <PublishedWithChanges />\n              </ListItemIcon>\n              <ListItemText primary=\"Vote Management\" />\n            </ListItem>\n          </List>\n        </Box>\n      </Drawer>\n    </>\n  );\n};\n\nexport default MainScreen;\n","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/CatchNotFound.tsx",[],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/VoteAnalytics.tsx",["69","70","71","72"],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/HelpPopup.tsx",["73"],"import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport Box from \"@mui/material/Box\";\n\nimport Typography from \"@mui/material/Typography\";\nimport SpeedDial from \"@mui/material/SpeedDial\";\nimport { QuestionMark } from \"@mui/icons-material\";\n\nconst HelpPopup = ({\n  heading,\n  content,\n}: {\n  heading: string;\n  content: string;\n}) => {\n  const [helpOpen, setHelpOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setHelpOpen(true);\n  };\n\n  const handleClose = (reason: string) => {\n    setHelpOpen(false);\n  };\n  return (\n    <div>\n      <SpeedDial\n        ariaLabel=\"SpeedDial basic example\"\n        sx={{ position: \"fixed\", bottom: 16, right: 16 }}\n        icon={<QuestionMark />}\n        onClick={handleClickOpen}\n      ></SpeedDial>\n      <Dialog open={helpOpen} onClose={handleClose}>\n        <Typography variant=\"h6\" textAlign=\"center\" sx={{ p: 1 }}>\n          {heading}\n        </Typography>\n\n        <Box sx={{ p: 4 }}>\n          <Typography variant=\"h6\" style={{ whiteSpace: \"pre-line\" }}>\n            {content.split(\"\\\\n\").map((i, key) => {\n              return <div key={key}>{i}</div>;\n            })}\n          </Typography>\n        </Box>\n      </Dialog>\n    </div>\n  );\n};\nexport default HelpPopup;\n",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":13,"column":27,"nodeType":"80","messageId":"81","endLine":13,"endColumn":33},{"ruleId":"78","severity":1,"message":"82","line":20,"column":3,"nodeType":"80","messageId":"81","endLine":20,"endColumn":13},{"ruleId":"78","severity":1,"message":"83","line":113,"column":11,"nodeType":"80","messageId":"81","endLine":113,"endColumn":17},{"ruleId":"84","severity":1,"message":"85","line":95,"column":5,"nodeType":"86","endLine":95,"endColumn":14,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"85","line":189,"column":5,"nodeType":"86","endLine":189,"endColumn":14,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":262,"column":9,"nodeType":"91","endLine":262,"endColumn":37},{"ruleId":"78","severity":1,"message":"92","line":24,"column":10,"nodeType":"80","messageId":"81","endLine":24,"endColumn":24},{"ruleId":"78","severity":1,"message":"93","line":36,"column":11,"nodeType":"80","messageId":"81","endLine":36,"endColumn":26},{"ruleId":"78","severity":1,"message":"94","line":38,"column":9,"nodeType":"80","messageId":"81","endLine":38,"endColumn":21},{"ruleId":"78","severity":1,"message":"95","line":1,"column":26,"nodeType":"80","messageId":"81","endLine":1,"endColumn":34},{"ruleId":"78","severity":1,"message":"96","line":30,"column":3,"nodeType":"80","messageId":"81","endLine":30,"endColumn":9},{"ruleId":"84","severity":1,"message":"97","line":40,"column":9,"nodeType":"98","endLine":40,"endColumn":58},{"ruleId":"84","severity":1,"message":"99","line":99,"column":6,"nodeType":"86","endLine":99,"endColumn":17,"suggestions":"100"},{"ruleId":"78","severity":1,"message":"101","line":2,"column":8,"nodeType":"80","messageId":"81","endLine":2,"endColumn":14},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"@typescript-eslint/no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Typography' is defined but never used.","'values' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["104"],["105"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'InvalidVoteKey' is defined but never used.","'isAuthenticated' is assigned a value but never used.","'hashUsername' is assigned a value but never used.","'useState' is defined but never used.","'Legend' is defined but never used.","The 'votes' logical expression could make the dependencies of useMemo Hook (at line 64) change on every render. To fix this, wrap the initialization of 'votes' in its own useMemo() Hook.","VariableDeclarator","React Hook useMemo has a missing dependency: 'votes.length'. Either include it or remove the dependency array.",["106"],"'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},{"desc":"107","fix":"109"},{"desc":"110","fix":"111"},"Update the dependencies array to be: [navigate, onLogin]",{"range":"112","text":"113"},{"range":"114","text":"113"},"Update the dependencies array to be: [voteTimes, votes.length]",{"range":"115","text":"116"},[2954,2963],"[navigate, onLogin]",[5388,5397],[2457,2468],"[voteTimes, votes.length]"]