[{"/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/index.tsx":"1","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/App.tsx":"2","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/config.ts":"3","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/MainScreen.tsx":"4","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/LoginScreen.tsx":"5","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/VoteScreen.tsx":"6","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/VoteAnalytics.tsx":"7","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/MainView.tsx":"8","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/auth/auth0-provider-with-history.js":"9","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/CatchNotFound.tsx":"10","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/VoteManagement.tsx":"11","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/HelpPopup.tsx":"12","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/index.tsx":"13","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/auth/auth0-provider-with-history.js":"14","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/App.tsx":"15","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/config.ts":"16","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/VoteManagement.tsx":"17","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/MainView.tsx":"18","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/LoginScreen.tsx":"19","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/VoteScreen.tsx":"20","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/MainScreen.tsx":"21","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/CatchNotFound.tsx":"22","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/VoteAnalytics.tsx":"23","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/HelpPopup.tsx":"24"},{"size":609,"mtime":1658192358000,"results":"25","hashOfConfig":"26"},{"size":4229,"mtime":1658646082000,"results":"27","hashOfConfig":"26"},{"size":1049,"mtime":1658646414000,"results":"28","hashOfConfig":"26"},{"size":3368,"mtime":1658646254000,"results":"29","hashOfConfig":"26"},{"size":7433,"mtime":1658815470737,"results":"30","hashOfConfig":"26"},{"size":5234,"mtime":1659671010401,"results":"31","hashOfConfig":"26"},{"size":6479,"mtime":1658557644000,"results":"32","hashOfConfig":"26"},{"size":10900,"mtime":1658825208088,"results":"33","hashOfConfig":"26"},{"size":701,"mtime":1658638610000,"results":"34","hashOfConfig":"26"},{"size":2717,"mtime":1658658666000,"results":"35","hashOfConfig":"26"},{"size":3349,"mtime":1658646200000,"results":"36","hashOfConfig":"26"},{"size":1300,"mtime":1658557644000,"results":"37","hashOfConfig":"26"},{"size":609,"mtime":1658192358000,"results":"38","hashOfConfig":"39"},{"size":701,"mtime":1658638610000,"results":"40","hashOfConfig":"39"},{"size":4229,"mtime":1658646082000,"results":"41","hashOfConfig":"39"},{"size":1049,"mtime":1658646414000,"results":"42","hashOfConfig":"39"},{"size":3349,"mtime":1658646200000,"results":"43","hashOfConfig":"39"},{"size":10900,"mtime":1658825208088,"results":"44","hashOfConfig":"39"},{"size":7433,"mtime":1658815470737,"results":"45","hashOfConfig":"39"},{"size":5234,"mtime":1659671010401,"results":"46","hashOfConfig":"39"},{"size":3368,"mtime":1658646254000,"results":"47","hashOfConfig":"39"},{"size":2717,"mtime":1658658666000,"results":"48","hashOfConfig":"39"},{"size":6479,"mtime":1658557644000,"results":"49","hashOfConfig":"39"},{"size":1300,"mtime":1658557644000,"results":"50","hashOfConfig":"39"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"abkutb",{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"53"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"53"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"53"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"53"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"53"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11zccp8",{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/index.tsx",[],["107","108"],"/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/App.tsx",["109","110"],"// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from \"react\";\nimport { LoginScreenVote, LandingScreen } from \"./LoginScreen\";\nimport { LogoutConfirm, PageNotFound } from \"./CatchNotFound\";\nimport MainScreen from \"./MainScreen\";\nimport VoteManagement from \"./VoteManagement\";\nimport VoteScreen from \"./VoteScreen\";\nimport DamlLedger from \"@daml/react\";\nimport Credentials from \"../Credentials\";\nimport { httpBaseUrl, wsBaseUrl } from \"../config\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport VoteAnalytics from \"./VoteAnalytics\";\nimport MainView from \"./MainView\";\nimport {\n  createTheme,\n  ThemeProvider,\n  Typography,\n  useMediaQuery,\n} from \"@mui/material\";\n\nexport function themeSwitcher() {}\n\nconst App: React.FC = () => {\n  const [credentials, setCredentials] = React.useState<\n    Credentials | undefined\n  >();\n  // create a dark theme light theme switcher\n  const preferedScheme = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: preferedScheme ? \"dark\" : \"light\",\n          primary: {\n            main: \"#387DF6\",\n          },\n          secondary: {\n            main: \"#666666\",\n          },\n        },\n\n        typography: {\n          fontFamily: \"Roboto, sans-serif\",\n          subtitle1: {\n            fontSize: 16,\n          },\n          h5: {\n            fontWeight: 700,\n            fontSize: 24,\n          },\n          h6: {\n            fontWeight: 500,\n          },\n        },\n      }),\n    [preferedScheme]\n  );\n  // app.use((req: any, res: any, next: any) => {\n  //   res.header(\"Access-Control-Allow-Origin\", \"*\");\n  //   next();\n  // });\n\n  return credentials ? (\n    <DamlLedger\n      token={credentials.token}\n      party={credentials.party}\n      httpBaseUrl={httpBaseUrl}\n      wsBaseUrl={wsBaseUrl}\n    >\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <div>\n          {/* <MainScreen onLogout={() => setCredentials(undefined)} /> */}\n\n          <Routes>\n            {/* <Route path=\"/\" component={Home} /> */}\n            <Route\n              path=\"/Vote\"\n              element={\n                <>\n                  <VoteScreen onLogout={() => setCredentials(undefined)} />\n                </>\n              }\n            ></Route>\n            <Route\n              path=\"/CreateVote\"\n              element={\n                <>\n                  <MainScreen onLogout={() => setCredentials(undefined)} />\n                  <MainView />\n                </>\n              }\n            ></Route>\n            <Route\n              path=\"/VoteAnalytics\"\n              element={\n                <>\n                  <MainScreen onLogout={() => setCredentials(undefined)} />\n                  <VoteAnalytics />\n                </>\n              }\n            ></Route>\n\n            <Route\n              path=\"/VoteManagement\"\n              element={\n                <>\n                  <MainScreen onLogout={() => setCredentials(undefined)} />\n                  <VoteManagement />\n                </>\n              }\n            ></Route>\n\n            <Route\n              path=\"*\"\n              element={\n                <LogoutConfirm onLogout={() => setCredentials(undefined)} />\n              }\n            ></Route>\n          </Routes>\n        </div>\n      </ThemeProvider>\n    </DamlLedger>\n  ) : (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div>\n        <Routes>\n          {/* <Route path=\"/\" component={Home} /> */}\n\n          <Route\n            path=\"/\"\n            element={<LandingScreen onLogin={setCredentials} />}\n          ></Route>\n          <Route\n            path=\"/VoteLogin/*\"\n            element={<LoginScreenVote onLogin={setCredentials} />}\n          ></Route>\n          <Route\n            path=\"/VoteLogin\"\n            element={<LoginScreenVote onLogin={setCredentials} />}\n          ></Route>\n          <Route path=\"*\" element={<PageNotFound />}></Route>\n        </Routes>\n      </div>\n    </ThemeProvider>\n\n    //\n  );\n};\n// APP_END\n\nexport default App;\n","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/config.ts",[],"/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/MainScreen.tsx",["111","112"],"// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React from \"react\";\nimport {\n  Typography,\n  Box,\n  IconButton,\n  Toolbar,\n  Drawer,\n  Button,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  AppBar,\n} from \"@mui/material\";\n\nimport { Link } from \"react-router-dom\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport {\n  Ballot,\n  Poll,\n  Logout,\n  PublishedWithChanges,\n} from \"@mui/icons-material\";\nimport { useParty } from \"@daml/react\";\nimport { usernameExport } from \"./LoginScreen\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\ntype Props = {\n  onLogout: () => void;\n};\n\nconst MainScreen: React.FC<Props> = ({ onLogout }) => {\n  const { isAuthenticated, logout } = useAuth0();\n\n  const hashUsername = useParty();\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const LogoutCall = () => {\n    logout({\n      returnTo: window.location.origin,\n    });\n  };\n  return (\n    <>\n      <Box sx={{ flexGrow: 1, m: 2 }}>\n        <AppBar position=\"static\" sx={{ borderRadius: \"16px\" }}>\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"start\"\n              onClick={handleDrawerOpen}\n              className=\"menu-button\"\n            >\n              <MenuIcon />\n            </IconButton>\n\n            <Typography variant=\"h5\" sx={{ flexGrow: 1 }} noWrap>\n              Votencrypt\n            </Typography>\n\n            <Button\n              variant=\"outlined\"\n              color=\"inherit\"\n              startIcon={<Logout />}\n              onClick={LogoutCall}\n            >\n              Log Out\n            </Button>\n          </Toolbar>\n        </AppBar>\n      </Box>\n      <Typography\n        variant=\"h3\"\n        textAlign=\"center\"\n        color=\"primary\"\n        sx={{ padding: 3 }}\n      >\n        Welcome, {usernameExport}\n      </Typography>\n      <Drawer anchor=\"left\" open={open} onClose={() => setOpen(false)}>\n        <Box p={2} width=\"250px\" textAlign=\"center\" role=\"presentation\">\n          <Typography variant=\"h6\" component=\"div\">\n            Menu\n          </Typography>\n          <List>\n            <ListItem\n              button\n              component={Link}\n              to=\"/CreateVote\"\n              className=\"test-select-list-item\"\n            >\n              <ListItemIcon>\n                <Ballot />\n              </ListItemIcon>\n              <ListItemText primary=\"Create Vote\" />\n            </ListItem>\n\n            <ListItem\n              button\n              component={Link}\n              to=\"/VoteAnalytics\"\n              className=\"test-select-list-item\"\n            >\n              <ListItemIcon>\n                <Poll />\n              </ListItemIcon>\n              <ListItemText primary=\"Analytics\" />\n            </ListItem>\n\n            <ListItem\n              button\n              component={Link}\n              to=\"/VoteManagement\"\n              className=\"test-select-list-item\"\n            >\n              <ListItemIcon>\n                <PublishedWithChanges />\n              </ListItemIcon>\n              <ListItemText primary=\"Vote Management\" />\n            </ListItem>\n          </List>\n        </Box>\n      </Drawer>\n    </>\n  );\n};\n\nexport default MainScreen;\n","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/LoginScreen.tsx",["113","114","115"],"import React, { useCallback } from \"react\";\nimport { Button, TextField, Paper, Typography, Grid, Box } from \"@mui/material\";\nimport Credentials from \"../Credentials\";\nimport Ledger from \"@daml/ledger\";\nimport { Voting } from \"@daml.js/create-daml-app\";\nimport { authConfig, httpBaseUrl } from \"../config\";\nimport { createHash } from \"crypto\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\n\ntype Props = {\n  onLogin: (credentials: Credentials) => void;\n};\n\n// Hashing function that converts a string to a hash using sha256\nfunction hash(input: string) {\n  return createHash(\"sha256\").update(input).digest(\"hex\");\n}\n\nexport let usernameExport: any;\n\n/* A function that takes in a component and returns a component. It is used to wrap the components in\nthe landing page and the login page. */\nconst wrap: (c: JSX.Element) => JSX.Element = (component) => (\n  <>\n    <Grid\n      container\n      direction=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      style={{ height: \"100vh\" }}\n    >\n      <Grid item>\n        <Typography variant=\"h3\" color=\"primary\" textAlign=\"center\">\n          Votencrypt\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Typography\n          variant=\"h6\"\n          fontWeight=\"600\"\n          color=\"primary\"\n          textAlign=\"center\"\n        >\n          Secure Voting On The Blockchain\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Paper sx={{ p: 2, borderRadius: \"16px\" }} elevation={2}>\n          {component}\n        </Paper>\n      </Grid>\n    </Grid>\n  </>\n);\n/**\n * This function is the landing page for the app. It has two buttons, one to create a vote and one to\n * vote. The create a vote button will take you to the login page if you are not logged in. If you are\n * logged in, it will take you to the create a vote page. The vote button will take you to the vote\n * login page\n * @param  - React.FC<Props> = ({ onLogin }) => {\n * @returns A function that returns a component\n */\n\nexport const LandingScreen: React.FC<Props> = ({ onLogin }) => {\n  const { loginWithPopup } = useAuth0();\n  const { user, isAuthenticated } = useAuth0();\n  const [loading, setLoading] = React.useState(false);\n\n  const navigate = useNavigate();\n\n  const login = useCallback(\n    async (credentials: Credentials) => {\n      try {\n        const ledger = new Ledger({ token: credentials.token, httpBaseUrl });\n        let userContract = await ledger.fetchByKey(\n          Voting.User,\n          credentials.party\n        );\n\n        if (userContract === null) {\n          const userCreds = {\n            username: credentials.party,\n          };\n          userContract = await ledger.create(Voting.User, userCreds);\n        }\n        navigate(\"/CreateVote\");\n\n        onLogin(credentials);\n      } catch (error) {\n        alert(`Unknown error:\\n${JSON.stringify(error)}`);\n      }\n    },\n    [onLogin]\n  );\n\n  const handleLogin = async () => {\n    // if user is not undefined then run\n\n    if (user !== undefined) {\n      const { name, sub } = user;\n\n      usernameExport = name;\n      const hashedUsername = hash(sub ? sub : \"\");\n      await login({\n        party: hashedUsername,\n        token: authConfig.makeToken(hashedUsername),\n      });\n    }\n  };\n  const handleLoginButton = async () => {\n    setLoading(true);\n    if (isAuthenticated === false) {\n      loginWithPopup({\n        screen_hint: \"signup\",\n      });\n    }\n  };\n  if (isAuthenticated === true && loading === true) {\n    handleLogin();\n    return <></>;\n  } else {\n    return wrap(\n      <>\n        <Grid\n          container\n          direction=\"column\"\n          style={{ width: \"400px\" }}\n          spacing={2}\n        >\n          <Grid item>\n            <LoadingButton\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleLoginButton}\n              style={{ width: \"100%\" }}\n              loading={loading}\n            >\n              Create A Vote\n            </LoadingButton>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\"test-select-login-button\"\n              component={Link}\n              to=\"/VoteLogin\"\n              style={{ width: \"100%\" }}\n            >\n              Vote\n            </Button>\n          </Grid>\n        </Grid>\n      </>\n    );\n  }\n};\n\n/* This function is the login page for voters. It has a text field to enter the vote key and a button\nto vote. The vote button will take you to the vote page. */\nexport const LoginScreenVote: React.FC<Props> = ({ onLogin }) => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = React.useState(false);\n\n  const login = useCallback(\n    async (credentials: Credentials) => {\n      try {\n        const ledger = new Ledger({ token: credentials.token, httpBaseUrl });\n        let userContract = await ledger.fetchByKey(\n          Voting.User,\n          credentials.party\n        );\n\n        if (userContract === null) {\n          const user = {\n            username: credentials.party,\n          };\n          userContract = await ledger.create(Voting.User, user);\n        }\n        navigate(\"/Vote\");\n\n        onLogin(credentials);\n      } catch (error) {\n        alert(`Unknown error:\\n${JSON.stringify(error)}`);\n      }\n    },\n    [onLogin]\n  );\n  const [username, setUsername] = React.useState(\"\");\n\n  const handleLogin = async () => {\n    usernameExport = username;\n\n    const hashedUsername = hash(username);\n\n    await login({\n      party: hashedUsername,\n      token: authConfig.makeToken(hashedUsername),\n    });\n  };\n  if (window.location.pathname.length <= \"/VoteLogin/\".length) {\n    return wrap(\n      <>\n        <Grid container direction=\"column\" style={{ width: \"400px\" }}>\n          <Grid item>\n            <TextField\n              placeholder=\"Enter Vote Key\"\n              value={username}\n              className=\"test-select-username-field\"\n              sx={{ paddingBottom: 2 }}\n              style={{ width: \"100%\" }}\n              onChange={(e) => setUsername(e.currentTarget.value)}\n              onKeyPress={(e) => {\n                if (e.key === \"Enter\" && username !== \"\") {\n                  e.preventDefault();\n                  handleLogin();\n                }\n              }}\n            />\n          </Grid>\n\n          <Grid item>\n            <LoadingButton\n              color=\"primary\"\n              onClick={(e) => {\n                if (username !== \"\") {\n                  setLoading(true);\n                  e.preventDefault();\n                  handleLogin();\n                }\n              }}\n              loading={loading}\n              variant=\"contained\"\n              style={{ width: \"100%\" }}\n            >\n              Vote\n            </LoadingButton>\n          </Grid>\n        </Grid>\n      </>\n    );\n  } else {\n    // assign characters in url path after  \"/VoteLogin/\" to username\n    if (username === \"\") {\n      setUsername(\n        window.location.pathname.substring(\n          \"/VoteLogin/\".length,\n          window.location.pathname.length\n        )\n      );\n      handleLogin();\n    }\n    return (\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        sx={{ display: \"flex\", height: \"100vh\" }}\n      >\n        <img src=\"/preLoader.svg\" />\n      </Box>\n    );\n  }\n};\n","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/VoteScreen.tsx",["116"],"/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/VoteAnalytics.tsx",["117","118","119","120"],"import React, { useMemo, useState } from \"react\";\nimport {\n  Divider,\n  Grid,\n  Container,\n  Paper,\n  Typography,\n  Box,\n  LinearProgress,\n} from \"@mui/material\";\nimport { Poll } from \"@mui/icons-material\";\n\nimport { Voting } from \"@daml.js/create-daml-app\";\n\nimport { useStreamQueries } from \"@daml/react\";\n\nimport {\n  Pie,\n  PieChart,\n  Tooltip,\n  Bar,\n  BarChart,\n  Cell,\n  XAxis,\n  LabelList,\n  CartesianGrid,\n  YAxis,\n  Line,\n  LineChart,\n  Legend,\n  Label,\n  ResponsiveContainer,\n} from \"recharts\";\n\nimport moment from \"moment\";\nimport HelpPopup from \"./HelpPopup\";\n\nconst VoteAnalytics: React.FC = () => {\n  const assets = useStreamQueries(Voting.Voting);\n  const votes = assets.contracts[0]?.payload?.votes || [];\n  const voters = assets.contracts[0]?.payload?.voters || [];\n  const voteTimes = assets.contracts[0]?.payload?.voteTimes || [];\n  const voteProgress = (votes.length / voters.length) * 100 || \"Loading...\";\n  const votesFrequency = useMemo(() => {\n    if (votes.length !== 0) {\n      const map = new Map<string, number>();\n      votes.forEach((vote) => {\n        if (map.has(vote)) {\n          map.set(vote, (map.get(vote) || 1) + 1);\n        } else {\n          map.set(vote, 1);\n        }\n      });\n      return [...map].map(([name, value]) => ({ name, value }));\n    } else {\n      return [\n        {\n          name: \"No Data\",\n          value: 0,\n        },\n      ];\n    }\n  }, [votes]);\n\n  // generate list of pastel colours based on length of data01\n  const colours = useMemo(() => {\n    const colours = [];\n    for (let i = 0; i < votesFrequency.length; i++) {\n      colours.push(`#${Math.random().toString(16).slice(2, 8)}`);\n    }\n    return colours;\n  }, [votesFrequency]);\n\n  // create a an array of objects with frequency in relationship with time\n  const votesFrequencyByTime = useMemo(() => {\n    if (votes.length !== 0) {\n      const map = new Map<number, number>();\n      voteTimes.forEach((voteTime) => {\n        var ajustedTime = voteTime.slice(0, -5) + \"00000\";\n        if (map.has(parseInt(ajustedTime))) {\n          map.set(\n            parseInt(ajustedTime),\n            (map.get(parseInt(ajustedTime)) || 1) + 1\n          );\n        } else {\n          map.set(parseInt(ajustedTime), 1);\n        }\n      });\n      return [...map].map(([time, value]) => ({ time, value })).reverse();\n    } else {\n      return [\n        {\n          time: 1,\n          value: 0,\n        },\n      ];\n    }\n  }, [voteTimes]);\n  return (\n    <Container>\n      <Box sx={{ p: 1 }}>\n        <Paper sx={{ p: 3, borderRadius: \"16px\" }} elevation={2}>\n          <Grid container spacing={0}>\n            <Grid item>\n              <Poll sx={{ fontSize: 50 }} color=\"primary\" />\n            </Grid>\n            <Grid item>\n              <Grid item>\n                <Typography variant=\"h5\" display=\"block\">\n                  Vote Analytics\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography\n                  variant=\"subtitle1\"\n                  color=\"secondary\"\n                  display=\"block\"\n                  style={{ lineHeight: \"15px\" }}\n                >\n                  View current vote results\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Divider />\n          <Typography variant=\"h5\">Vote Progress: {voteProgress}%</Typography>\n          <LinearProgress variant=\"determinate\" value={voteProgress} />\n\n          <Grid container justifyContent=\"center\" alignItems=\"center\">\n            <Grid item>\n              <BarChart width={400} height={100} data={votesFrequency}>\n                <XAxis dataKey=\"name\" />\n                <Bar dataKey=\"value\" fill=\"#8884d8\">\n                  {votesFrequency.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={colours[index]} />\n                  ))}\n                </Bar>\n\n                <Tooltip />\n              </BarChart>\n            </Grid>\n            <Grid item>\n              <PieChart width={400} height={400}>\n                <Pie\n                  data={votesFrequency}\n                  dataKey=\"value\"\n                  nameKey=\"name\"\n                  // cx={200}\n                  // cy={200}\n                >\n                  {votesFrequency.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={colours[index]} />\n                  ))}\n\n                  <LabelList dataKey=\"name\" fill=\"white\" />\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </Grid>\n          </Grid>\n          <Typography variant=\"h5\" textAlign=\"center\">\n            Votes Over Time\n          </Typography>\n          <Box style={{ width: \"100%\", height: \"20vh\" }} textAlign=\"center\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart\n                width={500}\n                height={300}\n                data={votesFrequencyByTime}\n                margin={{\n                  top: 5,\n                  right: 30,\n                  left: 20,\n                  bottom: 20,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"time\"\n                  tickFormatter={(unixTime) =>\n                    moment(unixTime).format(\"HH:mm Do\")\n                  }\n                >\n                  <Label value=\"Time\" fill=\"#8884d8\" position=\"bottom\" />\n                </XAxis>\n                <YAxis allowDecimals={false}>\n                  <Label value=\"Votes\" fill=\"#8884d8\" angle={-90} />\n                </YAxis>\n                <Tooltip />\n                <Line\n                  type=\"monotone\"\n                  name=\"Votes\"\n                  dataKey=\"value\"\n                  stroke=\"#8884d8\"\n                  activeDot={{ r: 8 }}\n                />\n                {/* <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" /> */}\n              </LineChart>\n            </ResponsiveContainer>\n          </Box>\n        </Paper>\n      </Box>\n      <HelpPopup\n        heading=\"Vote Analytics Help\"\n        content=\"\n          - This page shows the current vote results and the vote progress. \\n\n          - The vote progress is the percentage of votes casted out of the total number of voters. \\n\n          - The votes over time chart shows the number of votes that have been cast in relationship to time \\n\n        \"\n      ></HelpPopup>\n    </Container>\n  );\n};\n\nexport default VoteAnalytics;\n","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/MainView.tsx",["121"],"// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState } from \"react\";\n\nimport {\n  Button,\n  Container,\n  Slider,\n  List,\n  ListItem,\n  ListItemText,\n  TextField,\n  Typography,\n  Box,\n  Snackbar,\n  Grid,\n  Divider,\n  IconButton,\n  Paper,\n} from \"@mui/material\";\n\nimport {\n  Key,\n  Ballot,\n  Delete,\n  Close,\n  KeyboardReturn,\n} from \"@mui/icons-material\";\n\nimport { Voting } from \"@daml.js/create-daml-app\";\n\nimport { useParty, useLedger, useStreamQueries } from \"@daml/react\";\n\nimport { createHash } from \"crypto\";\n\nimport HelpPopup from \"./HelpPopup\";\n\nimport emailjs from \"@emailjs/browser\";\n\nlet hashedVoteKeys: string[] = [];\nconst MainView: React.FC = () => {\n  const hashUsername = useParty();\n  const [candidateList, setCandidateList] = useState<string[]>([]);\n  const [voteKeys, setVoteKeys] = useState<string[]>([]);\n  const [value, setValue] = React.useState<number>(10);\n  const [subjectText, setSubjectText] = useState(\"\");\n  const [candidateText, setCandidateText] = useState(\"\");\n  const [Popup, setPopup] = React.useState(false);\n  const [popupText, setPopupText] = React.useState(\"\");\n\n  const assets = useStreamQueries(Voting.Voting);\n\n  if (\n    JSON.parse(localStorage.getItem(\"voteKeys\") || \"test\").toString() !==\n      voteKeys.toString() &&\n    assets.contracts[0]?.payload?.voters !== undefined\n  ) {\n    setVoteKeys(JSON.parse(localStorage.getItem(\"voteKeys\") || \"test\"));\n  }\n\n  const ledger = useLedger();\n  const buttonHandler = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (assets.contracts.length === 0) {\n      const keys = generateVoteKeys(value);\n\n      setVoteKeys(keys[0]);\n      localStorage.setItem(\"voteKeys\", JSON.stringify(keys[0]));\n\n      const voteDetails = {\n        username: hashUsername,\n        voters: hashedVoteKeys,\n        votes: [],\n        voted: [],\n        voteTimes: [],\n        candidates: candidateList,\n        subject: subjectText,\n      };\n      ledger.create(Voting.Voting, voteDetails);\n      setPopupText(\"Vote Created\");\n      setPopup(true);\n    } else {\n      setPopupText(\"Vote In Progress\");\n      setPopup(true);\n    }\n  };\n\n  function hash(input: string) {\n    return createHash(\"sha256\").update(input).digest(\"hex\");\n  }\n\n  const handleSubmit = (e: any) => {\n    e.preventDefault();\n    const emails = [\"jefflolshort@gmail.com\", \"finnwjones@gmail.com\"];\n    for (let email = 0; email < emails.length; email++) {\n      var extractUserName = emails[email].match(/^([^@]*)@/);\n      var usernameE = extractUserName ? extractUserName[1] : null;\n      const emailDetails = {\n        name: usernameE,\n        email: emails[email],\n        message: voteKeys[email],\n      };\n      console.log(emailDetails);\n      emailjs.send(\n        \"service_es53dwq\",\n        \"template_9e2xqtw\",\n        emailDetails,\n        \"pwgIagqBDgmParume\"\n      );\n    }\n\n    const values = {\n      name: \"jefflolshort\",\n      email: \"jefflolshort@gmail.com\",\n      message: \"test\",\n    };\n\n    // console.log(usernameE);\n  };\n\n  const generateVoteKeys = (voterCount: any) => {\n    for (let i = 0; i < voterCount; i++) {\n      var crypto = require(\"crypto\");\n      var key = crypto.randomBytes(20).toString(\"hex\");\n      voteKeys.push(`${key}`);\n      hashedVoteKeys.push(hash(key));\n    }\n    return [voteKeys, hashedVoteKeys];\n  };\n\n  const addCandidate = () => {\n    if (candidateList.includes(candidateText)) {\n      setPopupText(\"Candidate already exists\");\n      setPopup(true);\n    } else {\n      setCandidateText(\"\");\n      // append candidateText to the start of candidateList\n      setCandidateList([candidateText, ...candidateList]);\n    }\n  };\n\n  // copy voteKeys to clipboard\n  const copyVoteKeys = () => {\n    navigator.clipboard.writeText(voteKeys.join(\"\\n\"));\n    setPopupText(\"Keys Copied To Clipboard\");\n    setPopup(true);\n  };\n\n  // export voteKeys to csv\n  const exportVoteKeys = () => {\n    const csv = voteKeys.join(\"\\n\");\n    const blob = new Blob([csv], { type: \"text/csv\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"voteKeys.csv\";\n    link.click();\n    setPopupText(\"Keys Exported\");\n    setPopup(true);\n  };\n\n  const handleClose = (\n    event: React.SyntheticEvent | Event,\n    reason?: string\n  ) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setPopup(false);\n  };\n  const action = (\n    <React.Fragment>\n      <IconButton\n        size=\"small\"\n        aria-label=\"close\"\n        color=\"inherit\"\n        onClick={handleClose}\n      >\n        <Close fontSize=\"small\" />\n      </IconButton>\n    </React.Fragment>\n  );\n\n  return (\n    <Container>\n      <Box sx={{ p: 1 }}>\n        <Paper sx={{ p: 3, borderRadius: \"16px\" }} elevation={2}>\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              flexWrap: \"wrap\",\n            }}\n          >\n            <Ballot sx={{ fontSize: 45 }} color=\"primary\" />\n            <Typography variant=\"h5\">Create A Vote</Typography>\n          </div>\n          <Divider sx={{ p: 0 }} />\n\n          <Typography variant=\"h6\" sx={{ pt: 2 }}>\n            What is the vote on?\n          </Typography>\n          <Box textAlign=\"center\">\n            <TextField\n              id=\"outlined-basic\"\n              label=\"Subject\"\n              variant=\"outlined\"\n              value={subjectText}\n              onChange={(event) => {\n                setSubjectText(event.target.value);\n              }}\n              style={{ width: \"94%\" }}\n              sx={{ m: 2 }}\n            />\n          </Box>\n          <Typography variant=\"h6\">Voters: {value}</Typography>\n\n          <Box textAlign=\"center\">\n            <Slider\n              value={value}\n              aria-label=\"Default\"\n              valueLabelDisplay=\"auto\"\n              name=\"slider\"\n              sx={{ m: 2 }}\n              style={{ width: \"95%\" }}\n              onChange={(event: any) => {\n                setValue(event.target.value);\n              }}\n            />\n          </Box>\n          <Typography variant=\"h6\">\n            Candidates: {candidateList.length}\n          </Typography>\n\n          <Box textAlign=\"center\">\n            <TextField\n              id=\"outlined-basic\"\n              label=\"Candidate\"\n              variant=\"outlined\"\n              value={candidateText}\n              onChange={(event) => {\n                setCandidateText(event.target.value);\n              }}\n              onKeyPress={(event) => {\n                if (event.key === \"Enter\") {\n                  event.preventDefault();\n                  addCandidate();\n                }\n              }}\n              style={{ width: \"95%\" }}\n              sx={{ m: 2 }}\n              InputProps={{\n                endAdornment: (\n                  <IconButton onClick={addCandidate}>\n                    <KeyboardReturn />\n                  </IconButton>\n                ),\n              }}\n            />\n\n            <List style={{ width: \"95%\" }} sx={{ ml: 2 }}>\n              {candidateList.map((item) => (\n                <ListItem\n                  key={item}\n                  secondaryAction={\n                    <IconButton\n                      edge=\"end\"\n                      aria-label=\"delete\"\n                      onClick={(e) => {\n                        setCandidateList((candidateList) =>\n                          candidateList.filter((i) => i !== item)\n                        );\n                      }}\n                    >\n                      <Delete />\n                    </IconButton>\n                  }\n                >\n                  <ListItemText primary={item} />\n                </ListItem>\n              ))}\n            </List>\n          </Box>\n\n          <Box textAlign=\"center\">\n            <Button\n              variant=\"contained\"\n              onClick={buttonHandler}\n              className=\"button\"\n              name=\"Create Vote\"\n              sx={{ m: 2, alignItems: \"center\" }}\n            >\n              Create Vote\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n              Send Email\n            </Button>\n          </Box>\n          <Snackbar\n            open={Popup}\n            autoHideDuration={2000}\n            onClose={handleClose}\n            message={popupText}\n            action={action}\n          />\n        </Paper>\n      </Box>\n\n      <Box sx={{ p: 1 }}>\n        <Paper sx={{ p: 3, borderRadius: \"16px\" }} elevation={2}>\n          <Grid container>\n            <Grid item>\n              <Key sx={{ fontSize: 45 }} color=\"primary\" />\n            </Grid>\n\n            <Grid item>\n              <Grid item>\n                <Typography variant=\"h5\" display=\"block\">\n                  Vote Keys\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography\n                  variant=\"subtitle1\"\n                  color=\"secondary\"\n                  display=\"block\"\n                  style={{ lineHeight: \"15px\" }}\n                >\n                  Distribute vote keys between voters\n                </Typography>\n              </Grid>\n            </Grid>\n            <Box textAlign=\"right\" sx={{ flexGrow: 1 }}>\n              <Button\n                sx={{ margin: 1 }}\n                variant=\"contained\"\n                onClick={exportVoteKeys}\n              >\n                Export CSV\n              </Button>\n              <Button variant=\"contained\" onClick={copyVoteKeys}>\n                Copy To Clipboard\n              </Button>\n            </Box>\n          </Grid>\n\n          <List\n            sx={{\n              width: \"100%\",\n              bgcolor: \"background.paper\",\n              borderRadius: \"16px\",\n              position: \"relative\",\n              overflow: \"auto\",\n              maxHeight: 300,\n              \"& ul\": { padding: 0 },\n            }}\n            subheader={<li />}\n          >\n            {[0].map((sectionId) => (\n              <li key={`section-${sectionId}`}>\n                <ul>\n                  {voteKeys.map((item) => (\n                    <ListItem key={`item-${sectionId}-${item}`}>\n                      <ListItemText primary={`${item}`} />\n                    </ListItem>\n                  ))}\n                </ul>\n              </li>\n            ))}\n          </List>\n        </Paper>\n      </Box>\n\n      <HelpPopup\n        heading=\"How To Create A Vote\"\n        content=\"\n          1. Enter the subject of the vote.\\n\n          2. Enter the number of voters.\\n\n          3. Enter the number of candidates.\\n\n          4. Enter the candidates.\\n\n          5. Click on the create vote button.\\n\n          6. The vote will be created.\\n\n        \"\n      ></HelpPopup>\n    </Container>\n  );\n};\n\nexport default MainView;\n","/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/auth/auth0-provider-with-history.js",[],["122","123"],"/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/CatchNotFound.tsx",[],"/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/VoteManagement.tsx",[],"/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/HelpPopup.tsx",["124"],"import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Dialog from \"@mui/material/Dialog\";\nimport Box from \"@mui/material/Box\";\n\nimport Typography from \"@mui/material/Typography\";\nimport SpeedDial from \"@mui/material/SpeedDial\";\nimport { QuestionMark } from \"@mui/icons-material\";\n\nconst HelpPopup = ({\n  heading,\n  content,\n}: {\n  heading: string;\n  content: string;\n}) => {\n  const [helpOpen, setHelpOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setHelpOpen(true);\n  };\n\n  const handleClose = (reason: string) => {\n    setHelpOpen(false);\n  };\n  return (\n    <div>\n      <SpeedDial\n        ariaLabel=\"SpeedDial basic example\"\n        sx={{ position: \"fixed\", bottom: 16, right: 16 }}\n        icon={<QuestionMark />}\n        onClick={handleClickOpen}\n      ></SpeedDial>\n      <Dialog open={helpOpen} onClose={handleClose}>\n        <Typography variant=\"h6\" textAlign=\"center\" sx={{ p: 1 }}>\n          {heading}\n        </Typography>\n\n        <Box sx={{ p: 4 }}>\n          <Typography variant=\"h6\" style={{ whiteSpace: \"pre-line\" }}>\n            {content.split(\"\\\\n\").map((i, key) => {\n              return <div key={key}>{i}</div>;\n            })}\n          </Typography>\n        </Box>\n      </Dialog>\n    </div>\n  );\n};\nexport default HelpPopup;\n","/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/index.tsx",[],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/auth/auth0-provider-with-history.js",[],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/App.tsx",["125","126"],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/config.ts",[],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/VoteManagement.tsx",[],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/MainView.tsx",["127"],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/LoginScreen.tsx",["128","129","130"],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/VoteScreen.tsx",["131"],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/MainScreen.tsx",["132","133"],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/CatchNotFound.tsx",[],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/VoteAnalytics.tsx",["134","135","136","137"],"/Users/finn.jones/Documents/Github/Blockchain-Voting/ui/src/components/HelpPopup.tsx",["138"],{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":13,"column":27,"nodeType":"145","messageId":"146","endLine":13,"endColumn":33},{"ruleId":"143","severity":1,"message":"147","line":20,"column":3,"nodeType":"145","messageId":"146","endLine":20,"endColumn":13},{"ruleId":"143","severity":1,"message":"148","line":36,"column":11,"nodeType":"145","messageId":"146","endLine":36,"endColumn":26},{"ruleId":"143","severity":1,"message":"149","line":38,"column":9,"nodeType":"145","messageId":"146","endLine":38,"endColumn":21},{"ruleId":"150","severity":1,"message":"151","line":95,"column":5,"nodeType":"152","endLine":95,"endColumn":14,"suggestions":"153"},{"ruleId":"150","severity":1,"message":"151","line":189,"column":5,"nodeType":"152","endLine":189,"endColumn":14,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":262,"column":9,"nodeType":"157","endLine":262,"endColumn":37},{"ruleId":"143","severity":1,"message":"158","line":24,"column":10,"nodeType":"145","messageId":"146","endLine":24,"endColumn":24},{"ruleId":"143","severity":1,"message":"159","line":1,"column":26,"nodeType":"145","messageId":"146","endLine":1,"endColumn":34},{"ruleId":"143","severity":1,"message":"160","line":30,"column":3,"nodeType":"145","messageId":"146","endLine":30,"endColumn":9},{"ruleId":"150","severity":1,"message":"161","line":40,"column":9,"nodeType":"162","endLine":40,"endColumn":58},{"ruleId":"150","severity":1,"message":"163","line":98,"column":6,"nodeType":"152","endLine":98,"endColumn":17,"suggestions":"164"},{"ruleId":"143","severity":1,"message":"165","line":113,"column":11,"nodeType":"145","messageId":"146","endLine":113,"endColumn":17},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"166","line":2,"column":8,"nodeType":"145","messageId":"146","endLine":2,"endColumn":14},{"ruleId":"143","severity":1,"message":"144","line":13,"column":27,"nodeType":"145","messageId":"146","endLine":13,"endColumn":33},{"ruleId":"143","severity":1,"message":"147","line":20,"column":3,"nodeType":"145","messageId":"146","endLine":20,"endColumn":13},{"ruleId":"143","severity":1,"message":"165","line":113,"column":11,"nodeType":"145","messageId":"146","endLine":113,"endColumn":17},{"ruleId":"150","severity":1,"message":"151","line":95,"column":5,"nodeType":"152","endLine":95,"endColumn":14,"suggestions":"167"},{"ruleId":"150","severity":1,"message":"151","line":189,"column":5,"nodeType":"152","endLine":189,"endColumn":14,"suggestions":"168"},{"ruleId":"155","severity":1,"message":"156","line":262,"column":9,"nodeType":"157","endLine":262,"endColumn":37},{"ruleId":"143","severity":1,"message":"158","line":24,"column":10,"nodeType":"145","messageId":"146","endLine":24,"endColumn":24},{"ruleId":"143","severity":1,"message":"148","line":36,"column":11,"nodeType":"145","messageId":"146","endLine":36,"endColumn":26},{"ruleId":"143","severity":1,"message":"149","line":38,"column":9,"nodeType":"145","messageId":"146","endLine":38,"endColumn":21},{"ruleId":"143","severity":1,"message":"159","line":1,"column":26,"nodeType":"145","messageId":"146","endLine":1,"endColumn":34},{"ruleId":"143","severity":1,"message":"160","line":30,"column":3,"nodeType":"145","messageId":"146","endLine":30,"endColumn":9},{"ruleId":"150","severity":1,"message":"161","line":40,"column":9,"nodeType":"162","endLine":40,"endColumn":58},{"ruleId":"150","severity":1,"message":"163","line":98,"column":6,"nodeType":"152","endLine":98,"endColumn":17,"suggestions":"169"},{"ruleId":"143","severity":1,"message":"166","line":2,"column":8,"nodeType":"145","messageId":"146","endLine":2,"endColumn":14},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"@typescript-eslint/no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Typography' is defined but never used.","'isAuthenticated' is assigned a value but never used.","'hashUsername' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["172"],["173"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'InvalidVoteKey' is defined but never used.","'useState' is defined but never used.","'Legend' is defined but never used.","The 'votes' logical expression could make the dependencies of useMemo Hook (at line 63) change on every render. To fix this, wrap the initialization of 'votes' in its own useMemo() Hook.","VariableDeclarator","React Hook useMemo has a missing dependency: 'votes.length'. Either include it or remove the dependency array.",["174"],"'values' is assigned a value but never used.","'Button' is defined but never used.",["175"],["176"],["177"],"no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},{"desc":"178","fix":"180"},{"desc":"181","fix":"182"},{"desc":"178","fix":"183"},{"desc":"178","fix":"184"},{"desc":"181","fix":"185"},"Update the dependencies array to be: [navigate, onLogin]",{"range":"186","text":"187"},{"range":"188","text":"187"},"Update the dependencies array to be: [voteTimes, votes.length]",{"range":"189","text":"190"},{"range":"191","text":"187"},{"range":"192","text":"187"},{"range":"193","text":"190"},[2959,2968],"[navigate, onLogin]",[5393,5402],[2432,2443],"[voteTimes, votes.length]",[2959,2968],[5393,5402],[2432,2443]]