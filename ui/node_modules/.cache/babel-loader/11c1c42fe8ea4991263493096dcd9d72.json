{"ast":null,"code":"var _jsxFileName = \"/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/VoteAnalytics.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from \"react\";\nimport { Divider, Grid, Container, Paper, Typography, Box, LinearProgress } from \"@mui/material\";\nimport { Poll } from \"@mui/icons-material\";\nimport { Voting } from \"@daml.js/create-daml-app\";\nimport { useStreamQueries } from \"@daml/react\";\nimport { Pie, PieChart, Tooltip, Bar, BarChart, Cell, XAxis, LabelList, CartesianGrid, YAxis, Line, LineChart, Label, ResponsiveContainer } from \"recharts\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst VoteAnalytics = () => {\n  _s();\n\n  var _assets$contracts$, _assets$contracts$$pa, _assets$contracts$2, _assets$contracts$2$p, _assets$contracts$3, _assets$contracts$3$p;\n\n  const assets = useStreamQueries(Voting.Voting);\n  const votes = ((_assets$contracts$ = assets.contracts[0]) === null || _assets$contracts$ === void 0 ? void 0 : (_assets$contracts$$pa = _assets$contracts$.payload) === null || _assets$contracts$$pa === void 0 ? void 0 : _assets$contracts$$pa.votes) || [];\n  const voters = ((_assets$contracts$2 = assets.contracts[0]) === null || _assets$contracts$2 === void 0 ? void 0 : (_assets$contracts$2$p = _assets$contracts$2.payload) === null || _assets$contracts$2$p === void 0 ? void 0 : _assets$contracts$2$p.voters) || [];\n  const voteTimes = ((_assets$contracts$3 = assets.contracts[0]) === null || _assets$contracts$3 === void 0 ? void 0 : (_assets$contracts$3$p = _assets$contracts$3.payload) === null || _assets$contracts$3$p === void 0 ? void 0 : _assets$contracts$3$p.voteTimes) || [];\n  const voteProgress = votes.length / voters.length * 100 || \"Loading...\";\n  const votesFrequency = useMemo(() => {\n    if (votes.length !== 0) {\n      const map = new Map();\n      votes.forEach(vote => {\n        if (map.has(vote)) {\n          map.set(vote, (map.get(vote) || 1) + 1);\n        } else {\n          map.set(vote, 1);\n        }\n      });\n      return [...map].map(_ref => {\n        let [name, value] = _ref;\n        return {\n          name,\n          value\n        };\n      });\n    } else {\n      return [{\n        name: \"No Data\",\n        value: 0\n      }];\n    }\n  }, [votes]); // generate list of pastel colours based on length of data01\n\n  const colours = useMemo(() => {\n    const colours = [];\n\n    for (let i = 0; i < votesFrequency.length; i++) {\n      colours.push(`#${Math.random().toString(16).slice(2, 8)}`);\n    }\n\n    return colours;\n  }, [votesFrequency]); // create a an array of objects with frequency in relationship with time\n\n  const votesFrequencyByTime = useMemo(() => {\n    if (votes.length !== 0) {\n      const map = new Map();\n      voteTimes.forEach(voteTime => {\n        var ajustedTime = voteTime.slice(0, -5) + \"00000\";\n\n        if (map.has(parseInt(ajustedTime))) {\n          map.set(parseInt(ajustedTime), (map.get(parseInt(ajustedTime)) || 1) + 1);\n        } else {\n          map.set(parseInt(ajustedTime), 1);\n        }\n      });\n      return [...map].map(_ref2 => {\n        let [time, value] = _ref2;\n        return {\n          time,\n          value\n        };\n      }).reverse();\n    } else {\n      return [{\n        time: 1,\n        value: 0\n      }];\n    }\n  }, [voteTimes]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          p: 3,\n          borderRadius: \"16px\"\n        },\n        elevation: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 0,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Poll, {\n              sx: {\n                fontSize: 50\n              },\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                display: \"block\",\n                children: \"Vote Analytics\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle1\",\n                color: \"secondary\",\n                display: \"block\",\n                style: {\n                  lineHeight: \"15px\"\n                },\n                children: \"View current vote results\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: [\"Vote Progress: \", voteProgress, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n          variant: \"determinate\",\n          value: voteProgress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              width: 400,\n              height: 100,\n              data: votesFrequency,\n              children: [/*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                dataKey: \"value\",\n                fill: \"#8884d8\",\n                children: votesFrequency.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                  fill: colours[index]\n                }, `cell-${index}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(PieChart, {\n              width: 400,\n              height: 400,\n              children: [/*#__PURE__*/_jsxDEV(Pie, {\n                data: votesFrequency,\n                dataKey: \"value\",\n                nameKey: \"name\" // cx={200}\n                // cy={200}\n                ,\n                children: [votesFrequency.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                  fill: colours[index]\n                }, `cell-${index}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 21\n                }, this)), /*#__PURE__*/_jsxDEV(LabelList, {\n                  dataKey: \"name\",\n                  fill: \"white\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          textAlign: \"center\",\n          children: \"Votes Over Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          style: {\n            width: \"100%\",\n            height: \"20vh\"\n          },\n          textAlign: \"center\",\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(LineChart, {\n              width: 500,\n              height: 300,\n              data: votesFrequencyByTime,\n              margin: {\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 20\n              },\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"time\",\n                tickFormatter: unixTime => moment(unixTime).format(\"HH:mm Do\"),\n                children: /*#__PURE__*/_jsxDEV(Label, {\n                  value: \"Time\",\n                  fill: \"#8884d8\",\n                  position: \"bottom\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                allowDecimals: false,\n                children: /*#__PURE__*/_jsxDEV(Label, {\n                  value: \"Votes\",\n                  fill: \"#8884d8\",\n                  angle: -90\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                name: \"Votes\",\n                dataKey: \"value\",\n                stroke: \"#8884d8\",\n                activeDot: {\n                  r: 8\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VoteAnalytics, \"bXcH83Rw3zXO69ITSepeQ3YneBs=\", false, function () {\n  return [useStreamQueries];\n});\n\n_c = VoteAnalytics;\nexport default VoteAnalytics;\n\nvar _c;\n\n$RefreshReg$(_c, \"VoteAnalytics\");","map":{"version":3,"sources":["/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/VoteAnalytics.tsx"],"names":["React","useMemo","Divider","Grid","Container","Paper","Typography","Box","LinearProgress","Poll","Voting","useStreamQueries","Pie","PieChart","Tooltip","Bar","BarChart","Cell","XAxis","LabelList","CartesianGrid","YAxis","Line","LineChart","Label","ResponsiveContainer","moment","VoteAnalytics","assets","votes","contracts","payload","voters","voteTimes","voteProgress","length","votesFrequency","map","Map","forEach","vote","has","set","get","name","value","colours","i","push","Math","random","toString","slice","votesFrequencyByTime","voteTime","ajustedTime","parseInt","time","reverse","p","borderRadius","fontSize","lineHeight","entry","index","width","height","top","right","left","bottom","unixTime","format","r"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport {\n  Divider,\n  Grid,\n  Container,\n  Paper,\n  Typography,\n  Box,\n  LinearProgress,\n} from \"@mui/material\";\nimport { Poll } from \"@mui/icons-material\";\n\nimport { Voting } from \"@daml.js/create-daml-app\";\n\nimport { useStreamQueries } from \"@daml/react\";\n\nimport {\n  Pie,\n  PieChart,\n  Tooltip,\n  Bar,\n  BarChart,\n  Cell,\n  XAxis,\n  LabelList,\n  CartesianGrid,\n  YAxis,\n  Line,\n  LineChart,\n  Legend,\n  Label,\n  ResponsiveContainer,\n} from \"recharts\";\n\nimport moment from \"moment\";\n\nconst VoteAnalytics: React.FC = () => {\n  const assets = useStreamQueries(Voting.Voting);\n  const votes = assets.contracts[0]?.payload?.votes || [];\n  const voters = assets.contracts[0]?.payload?.voters || [];\n  const voteTimes = assets.contracts[0]?.payload?.voteTimes || [];\n  const voteProgress = (votes.length / voters.length) * 100 || \"Loading...\";\n  const votesFrequency = useMemo(() => {\n    if (votes.length !== 0) {\n      const map = new Map<string, number>();\n      votes.forEach((vote) => {\n        if (map.has(vote)) {\n          map.set(vote, (map.get(vote) || 1) + 1);\n        } else {\n          map.set(vote, 1);\n        }\n      });\n      return [...map].map(([name, value]) => ({ name, value }));\n    } else {\n      return [\n        {\n          name: \"No Data\",\n          value: 0,\n        },\n      ];\n    }\n  }, [votes]);\n\n  // generate list of pastel colours based on length of data01\n  const colours = useMemo(() => {\n    const colours = [];\n    for (let i = 0; i < votesFrequency.length; i++) {\n      colours.push(`#${Math.random().toString(16).slice(2, 8)}`);\n    }\n    return colours;\n  }, [votesFrequency]);\n\n  // create a an array of objects with frequency in relationship with time\n  const votesFrequencyByTime = useMemo(() => {\n    if (votes.length !== 0) {\n      const map = new Map<number, number>();\n      voteTimes.forEach((voteTime) => {\n        var ajustedTime = voteTime.slice(0, -5) + \"00000\";\n        if (map.has(parseInt(ajustedTime))) {\n          map.set(\n            parseInt(ajustedTime),\n            (map.get(parseInt(ajustedTime)) || 1) + 1\n          );\n        } else {\n          map.set(parseInt(ajustedTime), 1);\n        }\n      });\n      return [...map].map(([time, value]) => ({ time, value })).reverse();\n    } else {\n      return [\n        {\n          time: 1,\n          value: 0,\n        },\n      ];\n    }\n  }, [voteTimes]);\n  return (\n    <Container>\n      <Box sx={{ p: 1 }}>\n        <Paper sx={{ p: 3, borderRadius: \"16px\" }} elevation={2}>\n          <Grid container spacing={0}>\n            <Grid item>\n              <Poll sx={{ fontSize: 50 }} color=\"primary\" />\n            </Grid>\n            <Grid item>\n              <Grid item>\n                <Typography variant=\"h5\" display=\"block\">\n                  Vote Analytics\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography\n                  variant=\"subtitle1\"\n                  color=\"secondary\"\n                  display=\"block\"\n                  style={{ lineHeight: \"15px\" }}\n                >\n                  View current vote results\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Divider />\n          <Typography variant=\"h5\">Vote Progress: {voteProgress}%</Typography>\n          <LinearProgress variant=\"determinate\" value={voteProgress} />\n\n          <Grid container justifyContent=\"center\" alignItems=\"center\">\n            <Grid item>\n              <BarChart width={400} height={100} data={votesFrequency}>\n                <XAxis dataKey=\"name\" />\n                <Bar dataKey=\"value\" fill=\"#8884d8\">\n                  {votesFrequency.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={colours[index]} />\n                  ))}\n                </Bar>\n\n                <Tooltip />\n              </BarChart>\n            </Grid>\n            <Grid item>\n              <PieChart width={400} height={400}>\n                <Pie\n                  data={votesFrequency}\n                  dataKey=\"value\"\n                  nameKey=\"name\"\n                  // cx={200}\n                  // cy={200}\n                >\n                  {votesFrequency.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={colours[index]} />\n                  ))}\n\n                  <LabelList dataKey=\"name\" fill=\"white\" />\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </Grid>\n          </Grid>\n          <Typography variant=\"h5\" textAlign=\"center\">\n            Votes Over Time\n          </Typography>\n          <Box style={{ width: \"100%\", height: \"20vh\" }} textAlign=\"center\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart\n                width={500}\n                height={300}\n                data={votesFrequencyByTime}\n                margin={{\n                  top: 5,\n                  right: 30,\n                  left: 20,\n                  bottom: 20,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey=\"time\"\n                  tickFormatter={(unixTime) =>\n                    moment(unixTime).format(\"HH:mm Do\")\n                  }\n                >\n                  <Label value=\"Time\" fill=\"#8884d8\" position=\"bottom\" />\n                </XAxis>\n                <YAxis allowDecimals={false}>\n                  <Label value=\"Votes\" fill=\"#8884d8\" angle={-90} />\n                </YAxis>\n                <Tooltip />\n                <Line\n                  type=\"monotone\"\n                  name=\"Votes\"\n                  dataKey=\"value\"\n                  stroke=\"#8884d8\"\n                  activeDot={{ r: 8 }}\n                />\n                {/* <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" /> */}\n              </LineChart>\n            </ResponsiveContainer>\n          </Box>\n        </Paper>\n      </Box>\n    </Container>\n  );\n};\n\nexport default VoteAnalytics;\n"]},"metadata":{},"sourceType":"module"}