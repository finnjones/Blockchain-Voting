{"ast":null,"code":"var _jsxFileName = \"/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/LoginScreen.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback } from \"react\";\nimport { Button, TextField, Paper, Typography, Grid } from \"@mui/material\";\nimport Ledger from \"@daml/ledger\";\nimport { Voting } from \"@daml.js/create-daml-app\";\nimport { authConfig, httpBaseUrl } from \"../config\";\nimport { createHash } from \"crypto\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction hash(input) {\n  return createHash(\"sha256\").update(input).digest(\"hex\");\n}\n\nexport let usernameExport;\n\nconst wrap = component =>\n/*#__PURE__*/\n// display VoteLogo.png\n_jsxDEV(_Fragment, {\n  children: /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    style: {\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        color: \"primary\",\n        textAlign: \"center\" // sx={{ pt: 2 }}#0d47a1\n        ,\n        children: \"Votencrypt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        fontWeight: \"600\",\n        color: \"primary\",\n        textAlign: \"center\" // sx={{ pt: 2 }}\n        ,\n        children: \"Secure Voting On The Blockchain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          p: 2,\n          borderRadius: \"16px\"\n        },\n        elevation: 2,\n        children: component\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this)\n}, void 0, false);\n\nexport const LandingScreen = _ref => {\n  _s();\n\n  let {\n    onLogin\n  } = _ref;\n  const {\n    loginWithPopup\n  } = useAuth0();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth0();\n  const [buttonPress, setButtonPress] = React.useState(false);\n  const navigate = useNavigate();\n  const login = useCallback(async credentials => {\n    try {\n      const ledger = new Ledger({\n        token: credentials.token,\n        httpBaseUrl\n      });\n      let userContract = await ledger.fetchByKey(Voting.User, credentials.party);\n\n      if (userContract === null) {\n        // const voteBob = useQuery()\n        const userCreds = {\n          username: credentials.party\n        };\n        userContract = await ledger.create(Voting.User, userCreds);\n      }\n\n      navigate(\"/CreateVote\");\n      onLogin(credentials);\n    } catch (error) {\n      alert(`Unknown error:\\n${JSON.stringify(error)}`);\n    }\n  }, [onLogin]);\n  const [username, setUsername] = React.useState(\"\");\n\n  const handleLogin = async () => {\n    // if user is not undefined then run\n    if (user !== undefined) {\n      const {\n        name,\n        picture,\n        email,\n        sub\n      } = user || {\n        name: \"\",\n        picture: \"\",\n        email: \"\",\n        sub: \"\"\n      }; // event.preventDefault();\n\n      usernameExport = name;\n      const hashedUsername = hash(sub);\n      await login({\n        party: hashedUsername,\n        token: authConfig.makeToken(hashedUsername)\n      });\n    }\n  };\n\n  const handleLoginButton = async () => {\n    setButtonPress(true);\n\n    if (isAuthenticated === false) {\n      loginWithPopup({\n        screen_hint: \"signup\"\n      });\n    }\n  };\n\n  console.log(isAuthenticated);\n\n  if (isAuthenticated === true && buttonPress === true) {\n    handleLogin();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  } else {\n    return wrap( /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        style: {\n          width: \"400px\"\n        },\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            className: \"test-select-login-button\",\n            onClick: handleLoginButton,\n            style: {\n              width: \"100%\"\n            },\n            children: \"Create A Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            className: \"test-select-login-button\",\n            component: Link,\n            to: \"/VoteLogin\",\n            style: {\n              width: \"100%\"\n            },\n            children: \"Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false));\n  }\n};\n\n_s(LandingScreen, \"PYzw602zYuVgCpmySA8yZAFzxHY=\", false, function () {\n  return [useAuth0, useAuth0, useNavigate];\n});\n\n_c = LandingScreen;\nexport const LoginScreenVote = _ref2 => {\n  _s2();\n\n  let {\n    onLogin\n  } = _ref2;\n  const navigate = useNavigate();\n  const login = useCallback(async credentials => {\n    try {\n      const ledger = new Ledger({\n        token: credentials.token,\n        httpBaseUrl\n      });\n      let userContract = await ledger.fetchByKey(Voting.User, credentials.party);\n\n      if (userContract === null) {\n        const user = {\n          username: credentials.party\n        };\n        userContract = await ledger.create(Voting.User, user);\n      }\n\n      navigate(\"/Vote\");\n      onLogin(credentials);\n    } catch (error) {\n      alert(`Unknown error:\\n${JSON.stringify(error)}`);\n    }\n  }, [onLogin]);\n  const [username, setUsername] = React.useState(\"\");\n\n  const handleLogin = async event => {\n    event.preventDefault();\n    usernameExport = username;\n    const hashedUsername = hash(username);\n    await login({\n      party: hashedUsername,\n      token: authConfig.makeToken(hashedUsername)\n    });\n  };\n\n  return wrap( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\",\n      style: {\n        width: \"400px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          placeholder: \"Enter Vote Key\",\n          value: username,\n          className: \"test-select-username-field\",\n          sx: {\n            paddingBottom: 2\n          },\n          style: {\n            width: \"100%\"\n          },\n          onChange: e => setUsername(e.currentTarget.value),\n          onKeyPress: e => {\n            if (e.key === \"Enter\") {\n              e.preventDefault();\n              handleLogin(e);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          className: \"test-select-login-button\",\n          onClick: handleLogin,\n          style: {\n            width: \"100%\"\n          },\n          children: \"Vote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)\n  }, void 0, false));\n};\n\n_s2(LoginScreenVote, \"1Y17q8DnexlLbBUPX1WX9bS0cIM=\", false, function () {\n  return [useNavigate];\n});\n\n_c2 = LoginScreenVote;\nexport const LoginScreenCreateVote = _ref3 => {\n  _s3();\n\n  let {\n    onLogin\n  } = _ref3;\n  const navigate = useNavigate();\n  const login = useCallback(async credentials => {\n    try {\n      const ledger = new Ledger({\n        token: credentials.token,\n        httpBaseUrl\n      });\n      let userContract = await ledger.fetchByKey(Voting.User, credentials.party);\n\n      if (userContract === null) {\n        // const voteBob = useQuery()\n        const user = {\n          username: credentials.party\n        };\n        userContract = await ledger.create(Voting.User, user);\n      }\n\n      navigate(\"/CreateVote\");\n      onLogin(credentials);\n    } catch (error) {\n      alert(`Unknown error:\\n${JSON.stringify(error)}`);\n    }\n  }, [onLogin]);\n  const [username, setUsername] = React.useState(\"\");\n\n  const handleLogin = async event => {\n    event.preventDefault();\n    usernameExport = username;\n    const hashedUsername = hash(username);\n    await login({\n      party: hashedUsername,\n      token: authConfig.makeToken(hashedUsername)\n    });\n  };\n\n  return wrap( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\",\n      style: {\n        width: \"400px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          placeholder: \"Username\",\n          value: username,\n          className: \"test-select-username-field\",\n          sx: {\n            paddingBottom: 2\n          },\n          style: {\n            width: \"100%\"\n          },\n          onChange: e => setUsername(e.currentTarget.value),\n          onKeyPress: e => {\n            if (e.key === \"Enter\") {\n              e.preventDefault();\n              handleLogin(e);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          className: \"test-select-login-button\",\n          onClick: handleLogin,\n          style: {\n            width: \"100%\"\n          },\n          children: \"Create A Vote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this)\n  }, void 0, false));\n};\n\n_s3(LoginScreenCreateVote, \"1Y17q8DnexlLbBUPX1WX9bS0cIM=\", false, function () {\n  return [useNavigate];\n});\n\n_c3 = LoginScreenCreateVote;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LandingScreen\");\n$RefreshReg$(_c2, \"LoginScreenVote\");\n$RefreshReg$(_c3, \"LoginScreenCreateVote\");","map":{"version":3,"sources":["/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/LoginScreen.tsx"],"names":["React","useCallback","Button","TextField","Paper","Typography","Grid","Ledger","Voting","authConfig","httpBaseUrl","createHash","Link","useNavigate","useAuth0","hash","input","update","digest","usernameExport","wrap","component","height","p","borderRadius","LandingScreen","onLogin","loginWithPopup","user","isAuthenticated","buttonPress","setButtonPress","useState","navigate","login","credentials","ledger","token","userContract","fetchByKey","User","party","userCreds","username","create","error","alert","JSON","stringify","setUsername","handleLogin","undefined","name","picture","email","sub","hashedUsername","makeToken","handleLoginButton","screen_hint","console","log","width","LoginScreenVote","event","preventDefault","paddingBottom","e","currentTarget","value","key","LoginScreenCreateVote"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback } from \"react\";\nimport { Button, TextField, Paper, Typography, Grid } from \"@mui/material\";\nimport Credentials from \"../Credentials\";\nimport Ledger from \"@daml/ledger\";\nimport { Voting } from \"@daml.js/create-daml-app\";\nimport { authConfig, httpBaseUrl } from \"../config\";\nimport { createHash } from \"crypto\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\ntype Props = {\n  onLogin: (credentials: Credentials) => void;\n};\n\nfunction hash(input: string) {\n  return createHash(\"sha256\").update(input).digest(\"hex\");\n}\n\nexport let usernameExport: any;\nconst wrap: (c: JSX.Element) => JSX.Element = (component) => (\n  // display VoteLogo.png\n  <>\n    <Grid\n      container\n      direction=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      style={{ height: \"100vh\" }}\n    >\n      <Grid item>\n        <Typography\n          variant=\"h3\"\n          color=\"primary\"\n          textAlign=\"center\"\n          // sx={{ pt: 2 }}#0d47a1\n        >\n          Votencrypt\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Typography\n          variant=\"h6\"\n          fontWeight=\"600\"\n          color=\"primary\"\n          textAlign=\"center\"\n          // sx={{ pt: 2 }}\n        >\n          Secure Voting On The Blockchain\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Paper sx={{ p: 2, borderRadius: \"16px\" }} elevation={2}>\n          {component}\n        </Paper>\n      </Grid>\n    </Grid>\n  </>\n);\n\nexport const LandingScreen: React.FC<Props> = ({ onLogin }) => {\n  const { loginWithPopup } = useAuth0();\n  const { user, isAuthenticated } = useAuth0();\n  const [buttonPress, setButtonPress] = React.useState(false);\n  const navigate = useNavigate();\n\n  const login = useCallback(\n    async (credentials: Credentials) => {\n      try {\n        const ledger = new Ledger({ token: credentials.token, httpBaseUrl });\n        let userContract = await ledger.fetchByKey(\n          Voting.User,\n          credentials.party\n        );\n\n        if (userContract === null) {\n          // const voteBob = useQuery()\n\n          const userCreds = {\n            username: credentials.party,\n          };\n          userContract = await ledger.create(Voting.User, userCreds);\n        }\n        navigate(\"/CreateVote\");\n\n        onLogin(credentials);\n      } catch (error) {\n        alert(`Unknown error:\\n${JSON.stringify(error)}`);\n      }\n    },\n    [onLogin]\n  );\n  const [username, setUsername] = React.useState(\"\");\n\n  const handleLogin = async () => {\n    // if user is not undefined then run\n\n    if (user !== undefined) {\n      const { name, picture, email, sub } = user || {\n        name: \"\",\n        picture: \"\",\n        email: \"\",\n        sub: \"\",\n      };\n\n      // event.preventDefault();\n      usernameExport = name;\n      const hashedUsername = hash(sub);\n      await login({\n        party: hashedUsername,\n        token: authConfig.makeToken(hashedUsername),\n      });\n    }\n  };\n  const handleLoginButton = async () => {\n    setButtonPress(true);\n    if (isAuthenticated === false) {\n      loginWithPopup({\n        screen_hint: \"signup\",\n      });\n    }\n  };\n  console.log(isAuthenticated);\n  if (isAuthenticated === true && buttonPress === true) {\n    handleLogin();\n    return <></>;\n  } else {\n    return wrap(\n      <>\n        <Grid\n          container\n          direction=\"column\"\n          style={{ width: \"400px\" }}\n          spacing={2}\n        >\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\"test-select-login-button\"\n              onClick={handleLoginButton}\n              style={{ width: \"100%\" }}\n            >\n              Create A Vote\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\"test-select-login-button\"\n              component={Link}\n              to=\"/VoteLogin\"\n              style={{ width: \"100%\" }}\n            >\n              Vote\n            </Button>\n          </Grid>\n        </Grid>\n      </>\n    );\n  }\n};\n\nexport const LoginScreenVote: React.FC<Props> = ({ onLogin }) => {\n  const navigate = useNavigate();\n\n  const login = useCallback(\n    async (credentials: Credentials) => {\n      try {\n        const ledger = new Ledger({ token: credentials.token, httpBaseUrl });\n        let userContract = await ledger.fetchByKey(\n          Voting.User,\n          credentials.party\n        );\n\n        if (userContract === null) {\n          const user = {\n            username: credentials.party,\n          };\n          userContract = await ledger.create(Voting.User, user);\n        }\n        navigate(\"/Vote\");\n\n        onLogin(credentials);\n      } catch (error) {\n        alert(`Unknown error:\\n${JSON.stringify(error)}`);\n      }\n    },\n    [onLogin]\n  );\n  const [username, setUsername] = React.useState(\"\");\n\n  const handleLogin = async (event: React.FormEvent) => {\n    event.preventDefault();\n    usernameExport = username;\n\n    const hashedUsername = hash(username);\n\n    await login({\n      party: hashedUsername,\n      token: authConfig.makeToken(hashedUsername),\n    });\n  };\n\n  return wrap(\n    <>\n      <Grid container direction=\"column\" style={{ width: \"400px\" }}>\n        <Grid item>\n          <TextField\n            placeholder=\"Enter Vote Key\"\n            value={username}\n            className=\"test-select-username-field\"\n            sx={{ paddingBottom: 2 }}\n            style={{ width: \"100%\" }}\n            onChange={(e) => setUsername(e.currentTarget.value)}\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\") {\n                e.preventDefault();\n                handleLogin(e);\n              }\n            }}\n          />\n        </Grid>\n\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"test-select-login-button\"\n            onClick={handleLogin}\n            style={{ width: \"100%\" }}\n          >\n            Vote\n          </Button>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport const LoginScreenCreateVote: React.FC<Props> = ({ onLogin }) => {\n  const navigate = useNavigate();\n\n  const login = useCallback(\n    async (credentials: Credentials) => {\n      try {\n        const ledger = new Ledger({ token: credentials.token, httpBaseUrl });\n        let userContract = await ledger.fetchByKey(\n          Voting.User,\n          credentials.party\n        );\n\n        if (userContract === null) {\n          // const voteBob = useQuery()\n\n          const user = {\n            username: credentials.party,\n          };\n          userContract = await ledger.create(Voting.User, user);\n        }\n        navigate(\"/CreateVote\");\n\n        onLogin(credentials);\n      } catch (error) {\n        alert(`Unknown error:\\n${JSON.stringify(error)}`);\n      }\n    },\n    [onLogin]\n  );\n  const [username, setUsername] = React.useState(\"\");\n\n  const handleLogin = async (event: React.FormEvent) => {\n    event.preventDefault();\n    usernameExport = username;\n    const hashedUsername = hash(username);\n\n    await login({\n      party: hashedUsername,\n      token: authConfig.makeToken(hashedUsername),\n    });\n  };\n  return wrap(\n    <>\n      {/* FORM_BEGIN */}\n      <Grid container direction=\"column\" style={{ width: \"400px\" }}>\n        <Grid item>\n          <TextField\n            placeholder=\"Username\"\n            value={username}\n            className=\"test-select-username-field\"\n            sx={{ paddingBottom: 2 }}\n            style={{ width: \"100%\" }}\n            onChange={(e) => setUsername(e.currentTarget.value)}\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\") {\n                e.preventDefault();\n                handleLogin(e);\n              }\n            }}\n          />\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            className=\"test-select-login-button\"\n            onClick={handleLogin}\n            style={{ width: \"100%\" }}\n          >\n            Create A Vote\n          </Button>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}