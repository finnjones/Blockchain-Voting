{"ast":null,"code":"var _jsxFileName = \"/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/LoginScreen.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback } from \"react\";\nimport { Button, TextField, Paper, Typography, Grid, Box } from \"@mui/material\";\nimport Ledger from \"@daml/ledger\";\nimport { Voting } from \"@daml.js/create-daml-app\";\nimport { authConfig, httpBaseUrl } from \"../config\";\nimport { createHash } from \"crypto\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport emailjs from \"@emailjs/browser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n// Hashing function that converts a string to a hash using sha256\nfunction hash(input) {\n  return createHash(\"sha256\").update(input).digest(\"hex\");\n}\n\nexport let usernameExport;\n\nconst handleSubmit = e => {\n  e.preventDefault();\n  const values = {\n    name: \"Finn\",\n    email: \"finn.jones@student.scots.college\",\n    message: \"test\"\n  };\n  emailjs.send(\"service_es53dwq\", \"template_9e2xqtw\", values, \"pwgIagqBDgmParume\");\n};\n/* A function that takes in a component and returns a component. It is used to wrap the components in\nthe landing page and the login page. */\n\n\nconst wrap = component => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    style: {\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        color: \"primary\",\n        textAlign: \"center\",\n        children: \"Votencrypt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        fontWeight: \"600\",\n        color: \"primary\",\n        textAlign: \"center\",\n        children: \"Secure Voting On The Blockchain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        sx: {\n          p: 2,\n          borderRadius: \"16px\"\n        },\n        elevation: 2,\n        children: component\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this)\n}, void 0, false);\n/**\n * This function is the landing page for the app. It has two buttons, one to create a vote and one to\n * vote. The create a vote button will take you to the login page if you are not logged in. If you are\n * logged in, it will take you to the create a vote page. The vote button will take you to the vote\n * login page\n * @param  - React.FC<Props> = ({ onLogin }) => {\n * @returns A function that returns a component\n */\n\n\nexport const LandingScreen = _ref => {\n  _s();\n\n  let {\n    onLogin\n  } = _ref;\n  const {\n    loginWithPopup\n  } = useAuth0();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth0();\n  const [loading, setLoading] = React.useState(false);\n  const navigate = useNavigate();\n  const login = useCallback(async credentials => {\n    try {\n      const ledger = new Ledger({\n        token: credentials.token,\n        httpBaseUrl\n      });\n      let userContract = await ledger.fetchByKey(Voting.User, credentials.party);\n\n      if (userContract === null) {\n        const userCreds = {\n          username: credentials.party\n        };\n        userContract = await ledger.create(Voting.User, userCreds);\n      }\n\n      navigate(\"/CreateVote\");\n      onLogin(credentials);\n    } catch (error) {\n      alert(`Unknown error:\\n${JSON.stringify(error)}`);\n    }\n  }, [onLogin]);\n\n  const handleLogin = async () => {\n    // if user is not undefined then run\n    if (user !== undefined) {\n      const {\n        name,\n        sub\n      } = user;\n      usernameExport = name;\n      const hashedUsername = hash(sub ? sub : \"\");\n      await login({\n        party: hashedUsername,\n        token: authConfig.makeToken(hashedUsername)\n      });\n    }\n  };\n\n  const handleLoginButton = async () => {\n    setLoading(true);\n\n    if (isAuthenticated === false) {\n      loginWithPopup({\n        screen_hint: \"signup\"\n      });\n    }\n  };\n\n  if (isAuthenticated === true && loading === true) {\n    handleLogin();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  } else {\n    return wrap( /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        style: {\n          width: \"400px\"\n        },\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(LoadingButton, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: handleLoginButton,\n            style: {\n              width: \"100%\"\n            },\n            loading: loading,\n            children: \"Create A Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            className: \"test-select-login-button\",\n            component: Link,\n            to: \"/VoteLogin\",\n            style: {\n              width: \"100%\"\n            },\n            children: \"Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: handleSubmit,\n            children: \"Send Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false));\n  }\n};\n/* This function is the login page for voters. It has a text field to enter the vote key and a button\nto vote. The vote button will take you to the vote page. */\n\n_s(LandingScreen, \"EohxBOtjkK8H0q/FJCoBU3Z8+qE=\", false, function () {\n  return [useAuth0, useAuth0, useNavigate];\n});\n\n_c = LandingScreen;\nexport const LoginScreenVote = _ref2 => {\n  _s2();\n\n  let {\n    onLogin\n  } = _ref2;\n  const navigate = useNavigate();\n  const [loading, setLoading] = React.useState(false);\n  const login = useCallback(async credentials => {\n    try {\n      const ledger = new Ledger({\n        token: credentials.token,\n        httpBaseUrl\n      });\n      let userContract = await ledger.fetchByKey(Voting.User, credentials.party);\n\n      if (userContract === null) {\n        const user = {\n          username: credentials.party\n        };\n        userContract = await ledger.create(Voting.User, user);\n      }\n\n      navigate(\"/Vote\");\n      onLogin(credentials);\n    } catch (error) {\n      alert(`Unknown error:\\n${JSON.stringify(error)}`);\n    }\n  }, [onLogin]);\n  const [username, setUsername] = React.useState(\"\");\n\n  const handleLogin = async () => {\n    usernameExport = username;\n    const hashedUsername = hash(username);\n    await login({\n      party: hashedUsername,\n      token: authConfig.makeToken(hashedUsername)\n    });\n  };\n\n  if (window.location.pathname.length <= \"/VoteLogin/\".length) {\n    return wrap( /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        style: {\n          width: \"400px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            placeholder: \"Enter Vote Key\",\n            value: username,\n            className: \"test-select-username-field\",\n            sx: {\n              paddingBottom: 2\n            },\n            style: {\n              width: \"100%\"\n            },\n            onChange: e => setUsername(e.currentTarget.value),\n            onKeyPress: e => {\n              if (e.key === \"Enter\" && username !== \"\") {\n                e.preventDefault();\n                handleLogin();\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(LoadingButton, {\n            color: \"primary\",\n            onClick: e => {\n              if (username !== \"\") {\n                setLoading(true);\n                e.preventDefault();\n                handleLogin();\n              }\n            },\n            loading: loading,\n            variant: \"contained\",\n            style: {\n              width: \"100%\"\n            },\n            children: \"Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)\n    }, void 0, false));\n  } else {\n    // assign characters in url path after  \"/VoteLogin/\" to username\n    if (username === \"\") {\n      setUsername(window.location.pathname.substring(\"/VoteLogin/\".length, window.location.pathname.length));\n      handleLogin();\n    }\n\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      sx: {\n        display: \"flex\",\n        height: \"100vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/preLoader.svg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s2(LoginScreenVote, \"aHaVTxe4Af46Alt6LFtyFswB9y0=\", false, function () {\n  return [useNavigate];\n});\n\n_c2 = LoginScreenVote;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LandingScreen\");\n$RefreshReg$(_c2, \"LoginScreenVote\");","map":{"version":3,"sources":["/Users/finn.jones/Documents/Github/Blockchain-Voting/Testing/create-daml-app/ui/src/components/LoginScreen.tsx"],"names":["React","useCallback","Button","TextField","Paper","Typography","Grid","Box","Ledger","Voting","authConfig","httpBaseUrl","createHash","Link","useNavigate","useAuth0","LoadingButton","emailjs","hash","input","update","digest","usernameExport","handleSubmit","e","preventDefault","values","name","email","message","send","wrap","component","height","p","borderRadius","LandingScreen","onLogin","loginWithPopup","user","isAuthenticated","loading","setLoading","useState","navigate","login","credentials","ledger","token","userContract","fetchByKey","User","party","userCreds","username","create","error","alert","JSON","stringify","handleLogin","undefined","sub","hashedUsername","makeToken","handleLoginButton","screen_hint","width","LoginScreenVote","setUsername","window","location","pathname","length","paddingBottom","currentTarget","value","key","substring","display"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\nimport { Button, TextField, Paper, Typography, Grid, Box } from \"@mui/material\";\nimport Credentials from \"../Credentials\";\nimport Ledger from \"@daml/ledger\";\nimport { Voting } from \"@daml.js/create-daml-app\";\nimport { authConfig, httpBaseUrl } from \"../config\";\nimport { createHash } from \"crypto\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport LoadingButton from \"@mui/lab/LoadingButton\";\nimport emailjs from \"@emailjs/browser\";\n\ntype Props = {\n  onLogin: (credentials: Credentials) => void;\n};\n\n// Hashing function that converts a string to a hash using sha256\nfunction hash(input: string) {\n  return createHash(\"sha256\").update(input).digest(\"hex\");\n}\n\nexport let usernameExport: any;\nconst handleSubmit = (e) => {\n  e.preventDefault();\n  const values = {\n    name: \"Finn\",\n    email: \"finn.jones@student.scots.college\",\n    message: \"test\",\n  };\n  emailjs.send(\n    \"service_es53dwq\",\n    \"template_9e2xqtw\",\n    values,\n    \"pwgIagqBDgmParume\"\n  );\n};\n/* A function that takes in a component and returns a component. It is used to wrap the components in\nthe landing page and the login page. */\nconst wrap: (c: JSX.Element) => JSX.Element = (component) => (\n  <>\n    <Grid\n      container\n      direction=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      style={{ height: \"100vh\" }}\n    >\n      <Grid item>\n        <Typography variant=\"h3\" color=\"primary\" textAlign=\"center\">\n          Votencrypt\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Typography\n          variant=\"h6\"\n          fontWeight=\"600\"\n          color=\"primary\"\n          textAlign=\"center\"\n        >\n          Secure Voting On The Blockchain\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Paper sx={{ p: 2, borderRadius: \"16px\" }} elevation={2}>\n          {component}\n        </Paper>\n      </Grid>\n    </Grid>\n  </>\n);\n/**\n * This function is the landing page for the app. It has two buttons, one to create a vote and one to\n * vote. The create a vote button will take you to the login page if you are not logged in. If you are\n * logged in, it will take you to the create a vote page. The vote button will take you to the vote\n * login page\n * @param  - React.FC<Props> = ({ onLogin }) => {\n * @returns A function that returns a component\n */\n\nexport const LandingScreen: React.FC<Props> = ({ onLogin }) => {\n  const { loginWithPopup } = useAuth0();\n  const { user, isAuthenticated } = useAuth0();\n  const [loading, setLoading] = React.useState(false);\n\n  const navigate = useNavigate();\n\n  const login = useCallback(\n    async (credentials: Credentials) => {\n      try {\n        const ledger = new Ledger({ token: credentials.token, httpBaseUrl });\n        let userContract = await ledger.fetchByKey(\n          Voting.User,\n          credentials.party\n        );\n\n        if (userContract === null) {\n          const userCreds = {\n            username: credentials.party,\n          };\n          userContract = await ledger.create(Voting.User, userCreds);\n        }\n        navigate(\"/CreateVote\");\n\n        onLogin(credentials);\n      } catch (error) {\n        alert(`Unknown error:\\n${JSON.stringify(error)}`);\n      }\n    },\n    [onLogin]\n  );\n\n  const handleLogin = async () => {\n    // if user is not undefined then run\n\n    if (user !== undefined) {\n      const { name, sub } = user;\n\n      usernameExport = name;\n      const hashedUsername = hash(sub ? sub : \"\");\n      await login({\n        party: hashedUsername,\n        token: authConfig.makeToken(hashedUsername),\n      });\n    }\n  };\n  const handleLoginButton = async () => {\n    setLoading(true);\n    if (isAuthenticated === false) {\n      loginWithPopup({\n        screen_hint: \"signup\",\n      });\n    }\n  };\n  if (isAuthenticated === true && loading === true) {\n    handleLogin();\n    return <></>;\n  } else {\n    return wrap(\n      <>\n        <Grid\n          container\n          direction=\"column\"\n          style={{ width: \"400px\" }}\n          spacing={2}\n        >\n          <Grid item>\n            <LoadingButton\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleLoginButton}\n              style={{ width: \"100%\" }}\n              loading={loading}\n            >\n              Create A Vote\n            </LoadingButton>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\"test-select-login-button\"\n              component={Link}\n              to=\"/VoteLogin\"\n              style={{ width: \"100%\" }}\n            >\n              Vote\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n              Send Email\n            </Button>\n          </Grid>\n        </Grid>\n      </>\n    );\n  }\n};\n\n/* This function is the login page for voters. It has a text field to enter the vote key and a button\nto vote. The vote button will take you to the vote page. */\nexport const LoginScreenVote: React.FC<Props> = ({ onLogin }) => {\n  const navigate = useNavigate();\n  const [loading, setLoading] = React.useState(false);\n\n  const login = useCallback(\n    async (credentials: Credentials) => {\n      try {\n        const ledger = new Ledger({ token: credentials.token, httpBaseUrl });\n        let userContract = await ledger.fetchByKey(\n          Voting.User,\n          credentials.party\n        );\n\n        if (userContract === null) {\n          const user = {\n            username: credentials.party,\n          };\n          userContract = await ledger.create(Voting.User, user);\n        }\n        navigate(\"/Vote\");\n\n        onLogin(credentials);\n      } catch (error) {\n        alert(`Unknown error:\\n${JSON.stringify(error)}`);\n      }\n    },\n    [onLogin]\n  );\n  const [username, setUsername] = React.useState(\"\");\n\n  const handleLogin = async () => {\n    usernameExport = username;\n\n    const hashedUsername = hash(username);\n\n    await login({\n      party: hashedUsername,\n      token: authConfig.makeToken(hashedUsername),\n    });\n  };\n  if (window.location.pathname.length <= \"/VoteLogin/\".length) {\n    return wrap(\n      <>\n        <Grid container direction=\"column\" style={{ width: \"400px\" }}>\n          <Grid item>\n            <TextField\n              placeholder=\"Enter Vote Key\"\n              value={username}\n              className=\"test-select-username-field\"\n              sx={{ paddingBottom: 2 }}\n              style={{ width: \"100%\" }}\n              onChange={(e) => setUsername(e.currentTarget.value)}\n              onKeyPress={(e) => {\n                if (e.key === \"Enter\" && username !== \"\") {\n                  e.preventDefault();\n                  handleLogin();\n                }\n              }}\n            />\n          </Grid>\n\n          <Grid item>\n            <LoadingButton\n              color=\"primary\"\n              onClick={(e) => {\n                if (username !== \"\") {\n                  setLoading(true);\n                  e.preventDefault();\n                  handleLogin();\n                }\n              }}\n              loading={loading}\n              variant=\"contained\"\n              style={{ width: \"100%\" }}\n            >\n              Vote\n            </LoadingButton>\n          </Grid>\n        </Grid>\n      </>\n    );\n  } else {\n    // assign characters in url path after  \"/VoteLogin/\" to username\n    if (username === \"\") {\n      setUsername(\n        window.location.pathname.substring(\n          \"/VoteLogin/\".length,\n          window.location.pathname.length\n        )\n      );\n      handleLogin();\n    }\n    return (\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        sx={{ display: \"flex\", height: \"100vh\" }}\n      >\n        <img src=\"/preLoader.svg\" />\n      </Box>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}